/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DepartmentsCreateNewDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartmentResponse } from '../models';
// @ts-ignore
import { DepartmentsListResponse } from '../models';
// @ts-ignore
import { DepartmentsRemoveByIdResponse } from '../models';
// @ts-ignore
import { DepartmentsUpdateByIdRequest } from '../models';
// @ts-ignore
import { DepartmentsUpdateByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a department
         * @param {DepartmentsCreateNewDepartmentRequest} departmentsCreateNewDepartmentRequest Department object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment: async (departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentsCreateNewDepartmentRequest' is not null or undefined
            assertParamExists('createNewDepartment', 'departmentsCreateNewDepartmentRequest', departmentsCreateNewDepartmentRequest)
            const localVarPath = `/core/v3/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsCreateNewDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/departments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsCreateNewDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List departments
         * @param {string} [name] Find Department by name
         * @param {number} [limit] Limit departments
         * @param {number} [page] Request a specific page
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (name?: string, limit?: number, page?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v3/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a department
         * @param {string} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            const localVarPath = `/core/v3/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/departments/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a department
         * @param {string} id Department ID
         * @param {DepartmentsUpdateByIdRequest} departmentsUpdateByIdRequest Department object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: string, departmentsUpdateByIdRequest: DepartmentsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            // verify required parameter 'departmentsUpdateByIdRequest' is not null or undefined
            assertParamExists('updateById', 'departmentsUpdateByIdRequest', departmentsUpdateByIdRequest)
            const localVarPath = `/core/v3/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/departments/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a department
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsCreateNewDepartmentResponse>> {
            const departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest = {
                companyId: requestParameters.companyId,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDepartment(departmentsCreateNewDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List departments
         * @param {DepartmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: DepartmentsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.name, requestParameters.limit, requestParameters.page, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a department
         * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a department
         * @param {DepartmentsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: DepartmentsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsUpdateByIdResponse>> {
            const departmentsUpdateByIdRequest: DepartmentsUpdateByIdRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, departmentsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a department
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsCreateNewDepartmentResponse> {
            return localVarFp.createNewDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List departments
         * @param {DepartmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: DepartmentsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DepartmentsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a department
         * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a department
         * @param {DepartmentsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: DepartmentsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiCreateNewDepartmentRequest
 */
export type DepartmentsApiCreateNewDepartmentRequest = {
    
} & DepartmentsCreateNewDepartmentRequest

/**
 * Request parameters for list operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiListRequest
 */
export type DepartmentsApiListRequest = {
    
    /**
    * Find Department by name
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly name?: string
    
    /**
    * Limit departments
    * @type {number}
    * @memberof DepartmentsApiList
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof DepartmentsApiList
    */
    readonly page?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for removeById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiRemoveByIdRequest
 */
export type DepartmentsApiRemoveByIdRequest = {
    
    /**
    * Department ID
    * @type {string}
    * @memberof DepartmentsApiRemoveById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiUpdateByIdRequest
 */
export type DepartmentsApiUpdateByIdRequest = {
    
    /**
    * Department ID
    * @type {string}
    * @memberof DepartmentsApiUpdateById
    */
    readonly id: string
    
} & DepartmentsUpdateByIdRequest

/**
 * DepartmentsApiGenerated - object-oriented interface
 * @export
 * @class DepartmentsApiGenerated
 * @extends {BaseAPI}
 */
export class DepartmentsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a department
     * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).createNewDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List departments
     * @param {DepartmentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public list(requestParameters: DepartmentsApiListRequest = {}, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a department
     * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a department
     * @param {DepartmentsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public updateById(requestParameters: DepartmentsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
