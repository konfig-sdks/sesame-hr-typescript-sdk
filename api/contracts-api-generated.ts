/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractsCreateNewContractRequest } from '../models';
// @ts-ignore
import { ContractsCreateNewContractResponse } from '../models';
// @ts-ignore
import { ContractsDeleteContractResponse } from '../models';
// @ts-ignore
import { ContractsGetByEmployeeIdResponse } from '../models';
// @ts-ignore
import { ContractsGetCurrentContractByEmployeeIdResponse } from '../models';
// @ts-ignore
import { ContractsUpdateContractRequest } from '../models';
// @ts-ignore
import { ContractsUpdateContractResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a contract
         * @param {ContractsCreateNewContractRequest} contractsCreateNewContractRequest Contract object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContract: async (contractsCreateNewContractRequest: ContractsCreateNewContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractsCreateNewContractRequest' is not null or undefined
            assertParamExists('createNewContract', 'contractsCreateNewContractRequest', contractsCreateNewContractRequest)
            const localVarPath = `/contract/v1/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractsCreateNewContractRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contracts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractsCreateNewContractRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a contract
         * @param {string} contractId Contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContract: async (contractId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('deleteContract', 'contractId', contractId)
            const localVarPath = `/contract/v1/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId !== undefined ? contractId : `-contractId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contracts/{contractId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contracts by employee
         * @param {string} employeeId Employee ID
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId: async (employeeId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/contract/v1/contracts/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contracts/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current contract by employeeId
         * @param {string} employeeId Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentContractByEmployeeId: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getCurrentContractByEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/contract/v1/contracts/{employeeId}/current-contract`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contracts/{employeeId}/current-contract',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a contract
         * @param {string} contractId Contract ID
         * @param {ContractsUpdateContractRequest} contractsUpdateContractRequest Contract object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContract: async (contractId: string, contractsUpdateContractRequest: ContractsUpdateContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('updateContract', 'contractId', contractId)
            // verify required parameter 'contractsUpdateContractRequest' is not null or undefined
            assertParamExists('updateContract', 'contractsUpdateContractRequest', contractsUpdateContractRequest)
            const localVarPath = `/contract/v1/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId !== undefined ? contractId : `-contractId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractsUpdateContractRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contracts/{contractId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractsUpdateContractRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a contract
         * @param {ContractsApiCreateNewContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewContract(requestParameters: ContractsApiCreateNewContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractsCreateNewContractResponse>> {
            const contractsCreateNewContractRequest: ContractsCreateNewContractRequest = {
                employeeId: requestParameters.employeeId,
                startAt: requestParameters.startAt,
                endAt: requestParameters.endAt,
                code: requestParameters.code,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewContract(contractsCreateNewContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a contract
         * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractsDeleteContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContract(requestParameters.contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get contracts by employee
         * @param {ContractsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployeeId(requestParameters: ContractsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractsGetByEmployeeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployeeId(requestParameters.employeeId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current contract by employeeId
         * @param {ContractsApiGetCurrentContractByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentContractByEmployeeId(requestParameters: ContractsApiGetCurrentContractByEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractsGetCurrentContractByEmployeeIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentContractByEmployeeId(requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a contract
         * @param {ContractsApiUpdateContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContract(requestParameters: ContractsApiUpdateContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractsUpdateContractResponse>> {
            const contractsUpdateContractRequest: ContractsUpdateContractRequest = {
                startAt: requestParameters.startAt,
                endAt: requestParameters.endAt,
                code: requestParameters.code,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContract(requestParameters.contractId, contractsUpdateContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a contract
         * @param {ContractsApiCreateNewContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContract(requestParameters: ContractsApiCreateNewContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractsCreateNewContractResponse> {
            return localVarFp.createNewContract(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a contract
         * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractsDeleteContractResponse> {
            return localVarFp.deleteContract(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get contracts by employee
         * @param {ContractsApiGetByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployeeId(requestParameters: ContractsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<ContractsGetByEmployeeIdResponse> {
            return localVarFp.getByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current contract by employeeId
         * @param {ContractsApiGetCurrentContractByEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentContractByEmployeeId(requestParameters: ContractsApiGetCurrentContractByEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<ContractsGetCurrentContractByEmployeeIdResponse> {
            return localVarFp.getCurrentContractByEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a contract
         * @param {ContractsApiUpdateContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContract(requestParameters: ContractsApiUpdateContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractsUpdateContractResponse> {
            return localVarFp.updateContract(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewContract operation in ContractsApi.
 * @export
 * @interface ContractsApiCreateNewContractRequest
 */
export type ContractsApiCreateNewContractRequest = {
    
} & ContractsCreateNewContractRequest

/**
 * Request parameters for deleteContract operation in ContractsApi.
 * @export
 * @interface ContractsApiDeleteContractRequest
 */
export type ContractsApiDeleteContractRequest = {
    
    /**
    * Contract ID
    * @type {string}
    * @memberof ContractsApiDeleteContract
    */
    readonly contractId: string
    
}

/**
 * Request parameters for getByEmployeeId operation in ContractsApi.
 * @export
 * @interface ContractsApiGetByEmployeeIdRequest
 */
export type ContractsApiGetByEmployeeIdRequest = {
    
    /**
    * Employee ID
    * @type {string}
    * @memberof ContractsApiGetByEmployeeId
    */
    readonly employeeId: string
    
    /**
    * Limit results
    * @type {number}
    * @memberof ContractsApiGetByEmployeeId
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof ContractsApiGetByEmployeeId
    */
    readonly page?: number
    
}

/**
 * Request parameters for getCurrentContractByEmployeeId operation in ContractsApi.
 * @export
 * @interface ContractsApiGetCurrentContractByEmployeeIdRequest
 */
export type ContractsApiGetCurrentContractByEmployeeIdRequest = {
    
    /**
    * Employee ID
    * @type {string}
    * @memberof ContractsApiGetCurrentContractByEmployeeId
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for updateContract operation in ContractsApi.
 * @export
 * @interface ContractsApiUpdateContractRequest
 */
export type ContractsApiUpdateContractRequest = {
    
    /**
    * Contract ID
    * @type {string}
    * @memberof ContractsApiUpdateContract
    */
    readonly contractId: string
    
} & ContractsUpdateContractRequest

/**
 * ContractsApiGenerated - object-oriented interface
 * @export
 * @class ContractsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a contract
     * @param {ContractsApiCreateNewContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApiGenerated
     */
    public createNewContract(requestParameters: ContractsApiCreateNewContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).createNewContract(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a contract
     * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApiGenerated
     */
    public deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).deleteContract(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get contracts by employee
     * @param {ContractsApiGetByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApiGenerated
     */
    public getByEmployeeId(requestParameters: ContractsApiGetByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current contract by employeeId
     * @param {ContractsApiGetCurrentContractByEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApiGenerated
     */
    public getCurrentContractByEmployeeId(requestParameters: ContractsApiGetCurrentContractByEmployeeIdRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getCurrentContractByEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a contract
     * @param {ContractsApiUpdateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApiGenerated
     */
    public updateContract(requestParameters: ContractsApiUpdateContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).updateContract(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
