/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeOfficeAssignationsAssignEmployeeToOfficeRequest } from '../models';
// @ts-ignore
import { EmployeeOfficeAssignationsAssignEmployeeToOfficeResponse } from '../models';
// @ts-ignore
import { EmployeeOfficeAssignationsListAssignationsResponse } from '../models';
// @ts-ignore
import { EmployeeOfficeAssignationsUnassignEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeeOfficeAssignationsUnassignEmployeeResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeOfficeAssignationsApi - axios parameter creator
 * @export
 */
export const EmployeeOfficeAssignationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign an employee to an office
         * @param {EmployeeOfficeAssignationsAssignEmployeeToOfficeRequest} employeeOfficeAssignationsAssignEmployeeToOfficeRequest Employee object needs to be assigned to Office object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeeToOffice: async (employeeOfficeAssignationsAssignEmployeeToOfficeRequest: EmployeeOfficeAssignationsAssignEmployeeToOfficeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeOfficeAssignationsAssignEmployeeToOfficeRequest' is not null or undefined
            assertParamExists('assignEmployeeToOffice', 'employeeOfficeAssignationsAssignEmployeeToOfficeRequest', employeeOfficeAssignationsAssignEmployeeToOfficeRequest)
            const localVarPath = `/core/v3/employee-office-assignations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeOfficeAssignationsAssignEmployeeToOfficeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/employee-office-assignations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeOfficeAssignationsAssignEmployeeToOfficeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List employee office assignation
         * @param {string} [employeeId] Find Assignation by employeeId
         * @param {string} [officeId] Find Assignation by officeId
         * @param {number} [limit] Limit assignations
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignations: async (employeeId?: string, officeId?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v3/employee-office-assignations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (officeId !== undefined) {
                localVarQueryParameter['officeId'] = officeId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/employee-office-assignations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign employee from office
         * @param {EmployeeOfficeAssignationsUnassignEmployeeRequest} employeeOfficeAssignationsUnassignEmployeeRequest Employee object needs to be unassigned to Office object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignEmployee: async (employeeOfficeAssignationsUnassignEmployeeRequest: EmployeeOfficeAssignationsUnassignEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeOfficeAssignationsUnassignEmployeeRequest' is not null or undefined
            assertParamExists('unassignEmployee', 'employeeOfficeAssignationsUnassignEmployeeRequest', employeeOfficeAssignationsUnassignEmployeeRequest)
            const localVarPath = `/core/v3/employee-office-assignations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeOfficeAssignationsUnassignEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/employee-office-assignations',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeOfficeAssignationsUnassignEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeOfficeAssignationsApi - functional programming interface
 * @export
 */
export const EmployeeOfficeAssignationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeOfficeAssignationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assign an employee to an office
         * @param {EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignEmployeeToOffice(requestParameters: EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeOfficeAssignationsAssignEmployeeToOfficeResponse>> {
            const employeeOfficeAssignationsAssignEmployeeToOfficeRequest: EmployeeOfficeAssignationsAssignEmployeeToOfficeRequest = {
                employeeId: requestParameters.employeeId,
                officeId: requestParameters.officeId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignEmployeeToOffice(employeeOfficeAssignationsAssignEmployeeToOfficeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List employee office assignation
         * @param {EmployeeOfficeAssignationsApiListAssignationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssignations(requestParameters: EmployeeOfficeAssignationsApiListAssignationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeOfficeAssignationsListAssignationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssignations(requestParameters.employeeId, requestParameters.officeId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unassign employee from office
         * @param {EmployeeOfficeAssignationsApiUnassignEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignEmployee(requestParameters: EmployeeOfficeAssignationsApiUnassignEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeOfficeAssignationsUnassignEmployeeResponse>> {
            const employeeOfficeAssignationsUnassignEmployeeRequest: EmployeeOfficeAssignationsUnassignEmployeeRequest = {
                employeeId: requestParameters.employeeId,
                officeId: requestParameters.officeId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignEmployee(employeeOfficeAssignationsUnassignEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeOfficeAssignationsApi - factory interface
 * @export
 */
export const EmployeeOfficeAssignationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeOfficeAssignationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Assign an employee to an office
         * @param {EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeeToOffice(requestParameters: EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeOfficeAssignationsAssignEmployeeToOfficeResponse> {
            return localVarFp.assignEmployeeToOffice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List employee office assignation
         * @param {EmployeeOfficeAssignationsApiListAssignationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignations(requestParameters: EmployeeOfficeAssignationsApiListAssignationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmployeeOfficeAssignationsListAssignationsResponse> {
            return localVarFp.listAssignations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unassign employee from office
         * @param {EmployeeOfficeAssignationsApiUnassignEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignEmployee(requestParameters: EmployeeOfficeAssignationsApiUnassignEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeOfficeAssignationsUnassignEmployeeResponse> {
            return localVarFp.unassignEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignEmployeeToOffice operation in EmployeeOfficeAssignationsApi.
 * @export
 * @interface EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest
 */
export type EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest = {
    
} & EmployeeOfficeAssignationsAssignEmployeeToOfficeRequest

/**
 * Request parameters for listAssignations operation in EmployeeOfficeAssignationsApi.
 * @export
 * @interface EmployeeOfficeAssignationsApiListAssignationsRequest
 */
export type EmployeeOfficeAssignationsApiListAssignationsRequest = {
    
    /**
    * Find Assignation by employeeId
    * @type {string}
    * @memberof EmployeeOfficeAssignationsApiListAssignations
    */
    readonly employeeId?: string
    
    /**
    * Find Assignation by officeId
    * @type {string}
    * @memberof EmployeeOfficeAssignationsApiListAssignations
    */
    readonly officeId?: string
    
    /**
    * Limit assignations
    * @type {number}
    * @memberof EmployeeOfficeAssignationsApiListAssignations
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof EmployeeOfficeAssignationsApiListAssignations
    */
    readonly page?: number
    
}

/**
 * Request parameters for unassignEmployee operation in EmployeeOfficeAssignationsApi.
 * @export
 * @interface EmployeeOfficeAssignationsApiUnassignEmployeeRequest
 */
export type EmployeeOfficeAssignationsApiUnassignEmployeeRequest = {
    
} & EmployeeOfficeAssignationsUnassignEmployeeRequest

/**
 * EmployeeOfficeAssignationsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeOfficeAssignationsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeOfficeAssignationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Assign an employee to an office
     * @param {EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeOfficeAssignationsApiGenerated
     */
    public assignEmployeeToOffice(requestParameters: EmployeeOfficeAssignationsApiAssignEmployeeToOfficeRequest, options?: AxiosRequestConfig) {
        return EmployeeOfficeAssignationsApiFp(this.configuration).assignEmployeeToOffice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List employee office assignation
     * @param {EmployeeOfficeAssignationsApiListAssignationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeOfficeAssignationsApiGenerated
     */
    public listAssignations(requestParameters: EmployeeOfficeAssignationsApiListAssignationsRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeOfficeAssignationsApiFp(this.configuration).listAssignations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unassign employee from office
     * @param {EmployeeOfficeAssignationsApiUnassignEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeOfficeAssignationsApiGenerated
     */
    public unassignEmployee(requestParameters: EmployeeOfficeAssignationsApiUnassignEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeOfficeAssignationsApiFp(this.configuration).unassignEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
