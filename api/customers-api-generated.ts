/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomersCreateNewCustomerRequest } from '../models';
// @ts-ignore
import { CustomersCreateNewCustomerResponse } from '../models';
// @ts-ignore
import { CustomersListResponse } from '../models';
// @ts-ignore
import { CustomersRemoveByIdResponse } from '../models';
// @ts-ignore
import { CustomersUpdateCustomerRequest } from '../models';
// @ts-ignore
import { CustomersUpdateCustomerResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a customer
         * @param {CustomersCreateNewCustomerRequest} customersCreateNewCustomerRequest Customer object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomer: async (customersCreateNewCustomerRequest: CustomersCreateNewCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customersCreateNewCustomerRequest' is not null or undefined
            assertParamExists('createNewCustomer', 'customersCreateNewCustomerRequest', customersCreateNewCustomerRequest)
            const localVarPath = `/project/v1/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customersCreateNewCustomerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/customers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customersCreateNewCustomerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List customers
         * @param {number} [limit] 
         * @param {number} [page] Request a specific page
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (limit?: number, page?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/v1/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a customer
         * @param {string} id Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            const localVarPath = `/project/v1/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/customers/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a customer
         * @param {string} id Customer ID
         * @param {CustomersUpdateCustomerRequest} customersUpdateCustomerRequest Customer object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: async (id: string, customersUpdateCustomerRequest: CustomersUpdateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCustomer', 'id', id)
            // verify required parameter 'customersUpdateCustomerRequest' is not null or undefined
            assertParamExists('updateCustomer', 'customersUpdateCustomerRequest', customersUpdateCustomerRequest)
            const localVarPath = `/project/v1/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customersUpdateCustomerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/customers/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customersUpdateCustomerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a customer
         * @param {CustomersApiCreateNewCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCustomer(requestParameters: CustomersApiCreateNewCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersCreateNewCustomerResponse>> {
            const customersCreateNewCustomerRequest: CustomersCreateNewCustomerRequest = {
                description: requestParameters.description,
                companyId: requestParameters.companyId,
                customerName: requestParameters.customerName,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                phone: requestParameters.phone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCustomer(customersCreateNewCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List customers
         * @param {CustomersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CustomersApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.limit, requestParameters.page, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a customer
         * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a customer
         * @param {CustomersApiUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomer(requestParameters: CustomersApiUpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomersUpdateCustomerResponse>> {
            const customersUpdateCustomerRequest: CustomersUpdateCustomerRequest = {
                description: requestParameters.description,
                customerName: requestParameters.customerName,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                phone: requestParameters.phone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomer(requestParameters.id, customersUpdateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a customer
         * @param {CustomersApiCreateNewCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomer(requestParameters: CustomersApiCreateNewCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<CustomersCreateNewCustomerResponse> {
            return localVarFp.createNewCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List customers
         * @param {CustomersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CustomersApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomersListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a customer
         * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomersRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a customer
         * @param {CustomersApiUpdateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(requestParameters: CustomersApiUpdateCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<CustomersUpdateCustomerResponse> {
            return localVarFp.updateCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiCreateNewCustomerRequest
 */
export type CustomersApiCreateNewCustomerRequest = {
    
} & CustomersCreateNewCustomerRequest

/**
 * Request parameters for list operation in CustomersApi.
 * @export
 * @interface CustomersApiListRequest
 */
export type CustomersApiListRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof CustomersApiList
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof CustomersApiList
    */
    readonly page?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof CustomersApiList
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for removeById operation in CustomersApi.
 * @export
 * @interface CustomersApiRemoveByIdRequest
 */
export type CustomersApiRemoveByIdRequest = {
    
    /**
    * Customer ID
    * @type {string}
    * @memberof CustomersApiRemoveById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiUpdateCustomerRequest
 */
export type CustomersApiUpdateCustomerRequest = {
    
    /**
    * Customer ID
    * @type {string}
    * @memberof CustomersApiUpdateCustomer
    */
    readonly id: string
    
} & CustomersUpdateCustomerRequest

/**
 * CustomersApiGenerated - object-oriented interface
 * @export
 * @class CustomersApiGenerated
 * @extends {BaseAPI}
 */
export class CustomersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a customer
     * @param {CustomersApiCreateNewCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public createNewCustomer(requestParameters: CustomersApiCreateNewCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).createNewCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List customers
     * @param {CustomersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public list(requestParameters: CustomersApiListRequest = {}, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a customer
     * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a customer
     * @param {CustomersApiUpdateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public updateCustomer(requestParameters: CustomersApiUpdateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).updateCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
