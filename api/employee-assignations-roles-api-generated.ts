/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeAssignationsRolesAssignRoleRequest } from '../models';
// @ts-ignore
import { EmployeeAssignationsRolesAssignRoleResponse } from '../models';
// @ts-ignore
import { EmployeeAssignationsRolesListByEmployeeResponse } from '../models';
// @ts-ignore
import { EmployeeAssignationsRolesUnassignRoleRequest } from '../models';
// @ts-ignore
import { EmployeeAssignationsRolesUnassignRoleResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeAssignationsRolesApi - axios parameter creator
 * @export
 */
export const EmployeeAssignationsRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign Role
         * @param {EmployeeAssignationsRolesAssignRoleRequest} employeeAssignationsRolesAssignRoleRequest Assign object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole: async (employeeAssignationsRolesAssignRoleRequest: EmployeeAssignationsRolesAssignRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeAssignationsRolesAssignRoleRequest' is not null or undefined
            assertParamExists('assignRole', 'employeeAssignationsRolesAssignRoleRequest', employeeAssignationsRolesAssignRoleRequest)
            const localVarPath = `/core/v3/roles/assignation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAssignationsRolesAssignRoleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/roles/assignation',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAssignationsRolesAssignRoleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assignations Roles by Employee
         * @param {string} employeeId Employee Id
         * @param {number} [limit] Limit departments
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployee: async (employeeId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listByEmployee', 'employeeId', employeeId)
            const localVarPath = `/core/v3/roles/assignation/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/roles/assignation/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign Role
         * @param {EmployeeAssignationsRolesUnassignRoleRequest} employeeAssignationsRolesUnassignRoleRequest Unassign object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole: async (employeeAssignationsRolesUnassignRoleRequest: EmployeeAssignationsRolesUnassignRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeAssignationsRolesUnassignRoleRequest' is not null or undefined
            assertParamExists('unassignRole', 'employeeAssignationsRolesUnassignRoleRequest', employeeAssignationsRolesUnassignRoleRequest)
            const localVarPath = `/core/v3/roles/assignation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAssignationsRolesUnassignRoleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/roles/assignation',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAssignationsRolesUnassignRoleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeAssignationsRolesApi - functional programming interface
 * @export
 */
export const EmployeeAssignationsRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeAssignationsRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Assign Role
         * @param {EmployeeAssignationsRolesApiAssignRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRole(requestParameters: EmployeeAssignationsRolesApiAssignRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAssignationsRolesAssignRoleResponse>> {
            const employeeAssignationsRolesAssignRoleRequest: EmployeeAssignationsRolesAssignRoleRequest = {
                roleId: requestParameters.roleId,
                employeeId: requestParameters.employeeId,
                entityAffectedId: requestParameters.entityAffectedId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(employeeAssignationsRolesAssignRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Assignations Roles by Employee
         * @param {EmployeeAssignationsRolesApiListByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByEmployee(requestParameters: EmployeeAssignationsRolesApiListByEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAssignationsRolesListByEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByEmployee(requestParameters.employeeId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unassign Role
         * @param {EmployeeAssignationsRolesApiUnassignRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignRole(requestParameters: EmployeeAssignationsRolesApiUnassignRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAssignationsRolesUnassignRoleResponse>> {
            const employeeAssignationsRolesUnassignRoleRequest: EmployeeAssignationsRolesUnassignRoleRequest = {
                assignationId: requestParameters.assignationId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(employeeAssignationsRolesUnassignRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeAssignationsRolesApi - factory interface
 * @export
 */
export const EmployeeAssignationsRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeAssignationsRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Assign Role
         * @param {EmployeeAssignationsRolesApiAssignRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole(requestParameters: EmployeeAssignationsRolesApiAssignRoleRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAssignationsRolesAssignRoleResponse> {
            return localVarFp.assignRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assignations Roles by Employee
         * @param {EmployeeAssignationsRolesApiListByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployee(requestParameters: EmployeeAssignationsRolesApiListByEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAssignationsRolesListByEmployeeResponse> {
            return localVarFp.listByEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unassign Role
         * @param {EmployeeAssignationsRolesApiUnassignRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole(requestParameters: EmployeeAssignationsRolesApiUnassignRoleRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAssignationsRolesUnassignRoleResponse> {
            return localVarFp.unassignRole(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignRole operation in EmployeeAssignationsRolesApi.
 * @export
 * @interface EmployeeAssignationsRolesApiAssignRoleRequest
 */
export type EmployeeAssignationsRolesApiAssignRoleRequest = {
    
} & EmployeeAssignationsRolesAssignRoleRequest

/**
 * Request parameters for listByEmployee operation in EmployeeAssignationsRolesApi.
 * @export
 * @interface EmployeeAssignationsRolesApiListByEmployeeRequest
 */
export type EmployeeAssignationsRolesApiListByEmployeeRequest = {
    
    /**
    * Employee Id
    * @type {string}
    * @memberof EmployeeAssignationsRolesApiListByEmployee
    */
    readonly employeeId: string
    
    /**
    * Limit departments
    * @type {number}
    * @memberof EmployeeAssignationsRolesApiListByEmployee
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof EmployeeAssignationsRolesApiListByEmployee
    */
    readonly page?: number
    
}

/**
 * Request parameters for unassignRole operation in EmployeeAssignationsRolesApi.
 * @export
 * @interface EmployeeAssignationsRolesApiUnassignRoleRequest
 */
export type EmployeeAssignationsRolesApiUnassignRoleRequest = {
    
} & EmployeeAssignationsRolesUnassignRoleRequest

/**
 * EmployeeAssignationsRolesApiGenerated - object-oriented interface
 * @export
 * @class EmployeeAssignationsRolesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeAssignationsRolesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Assign Role
     * @param {EmployeeAssignationsRolesApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAssignationsRolesApiGenerated
     */
    public assignRole(requestParameters: EmployeeAssignationsRolesApiAssignRoleRequest, options?: AxiosRequestConfig) {
        return EmployeeAssignationsRolesApiFp(this.configuration).assignRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assignations Roles by Employee
     * @param {EmployeeAssignationsRolesApiListByEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAssignationsRolesApiGenerated
     */
    public listByEmployee(requestParameters: EmployeeAssignationsRolesApiListByEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeAssignationsRolesApiFp(this.configuration).listByEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unassign Role
     * @param {EmployeeAssignationsRolesApiUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAssignationsRolesApiGenerated
     */
    public unassignRole(requestParameters: EmployeeAssignationsRolesApiUnassignRoleRequest, options?: AxiosRequestConfig) {
        return EmployeeAssignationsRolesApiFp(this.configuration).unassignRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
