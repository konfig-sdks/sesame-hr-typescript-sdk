/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckValidationListByEmployeesAndStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CheckValidationApi - axios parameter creator
 * @export
 */
export const CheckValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Check Validation By Employees and Status
         * @param {Array<string>} [employeeIdsIn] EmployeeIds to query
         * @param {'unsent' | 'sent' | 'accepted' | 'rejected'} [status] Allowed Status
         * @param {string | Date} [from] Request a date from
         * @param {string | Date} [to] Request a date to
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployeesAndStatus: async (employeeIdsIn?: Array<string>, status?: 'unsent' | 'sent' | 'accepted' | 'rejected', from?: string | Date, to?: string | Date, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/check-validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeIdsIn) {
                localVarQueryParameter['employeeIds[in]'] = employeeIdsIn;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/check-validation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckValidationApi - functional programming interface
 * @export
 */
export const CheckValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Check Validation By Employees and Status
         * @param {CheckValidationApiListByEmployeesAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByEmployeesAndStatus(requestParameters: CheckValidationApiListByEmployeesAndStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckValidationListByEmployeesAndStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByEmployeesAndStatus(requestParameters.employeeIdsIn, requestParameters.status, requestParameters.from, requestParameters.to, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckValidationApi - factory interface
 * @export
 */
export const CheckValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckValidationApiFp(configuration)
    return {
        /**
         * 
         * @summary List Check Validation By Employees and Status
         * @param {CheckValidationApiListByEmployeesAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEmployeesAndStatus(requestParameters: CheckValidationApiListByEmployeesAndStatusRequest, options?: AxiosRequestConfig): AxiosPromise<CheckValidationListByEmployeesAndStatusResponse> {
            return localVarFp.listByEmployeesAndStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listByEmployeesAndStatus operation in CheckValidationApi.
 * @export
 * @interface CheckValidationApiListByEmployeesAndStatusRequest
 */
export type CheckValidationApiListByEmployeesAndStatusRequest = {
    
    /**
    * EmployeeIds to query
    * @type {Array<string>}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly employeeIdsIn?: Array<string>
    
    /**
    * Allowed Status
    * @type {'unsent' | 'sent' | 'accepted' | 'rejected'}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly status?: 'unsent' | 'sent' | 'accepted' | 'rejected'
    
    /**
    * Request a date from
    * @type {string | Date}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly from?: string | Date
    
    /**
    * Request a date to
    * @type {string | Date}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly to?: string | Date
    
    /**
    * Limit results
    * @type {number}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof CheckValidationApiListByEmployeesAndStatus
    */
    readonly page?: number
    
}

/**
 * CheckValidationApiGenerated - object-oriented interface
 * @export
 * @class CheckValidationApiGenerated
 * @extends {BaseAPI}
 */
export class CheckValidationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List Check Validation By Employees and Status
     * @param {CheckValidationApiListByEmployeesAndStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckValidationApiGenerated
     */
    public listByEmployeesAndStatus(requestParameters: CheckValidationApiListByEmployeesAndStatusRequest, options?: AxiosRequestConfig) {
        return CheckValidationApiFp(this.configuration).listByEmployeesAndStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
