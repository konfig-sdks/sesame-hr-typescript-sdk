/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StatisticsListWorkedAbsenceDaysByEmployeeResponse } from '../models';
// @ts-ignore
import { StatisticsListWorkedHoursByEmployeeResponse } from '../models';
// @ts-ignore
import { StatisticsListWorkedHoursByWeekDayResponse } from '../models';
// @ts-ignore
import { StatisticsListWorkedNightHoursResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Worked Absence Days By Employee
         * @param {string | Date} from Y-m-d
         * @param {string | Date} to Y-m-d
         * @param {Array<string>} [employeeIdsIn] Array of employee ids
         * @param {number} [limit] Limit employees
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedAbsenceDaysByEmployee: async (from: string | Date, to: string | Date, employeeIdsIn?: Array<string>, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('listWorkedAbsenceDaysByEmployee', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('listWorkedAbsenceDaysByEmployee', 'to', to)
            const localVarPath = `/schedule/v1/reports/worked-absence-days`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeIdsIn) {
                localVarQueryParameter['employeeIds[in]'] = employeeIdsIn.join(COLLECTION_FORMATS.csv);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/reports/worked-absence-days',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Worked Hours By Employee
         * @param {string | Date} from Y-m-d
         * @param {string | Date} to Y-m-d
         * @param {Array<string>} [employeeIdsIn] Array of employee ids
         * @param {boolean} [withChecks] true or false
         * @param {number} [limit] Limit employees
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedHoursByEmployee: async (from: string | Date, to: string | Date, employeeIdsIn?: Array<string>, withChecks?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('listWorkedHoursByEmployee', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('listWorkedHoursByEmployee', 'to', to)
            const localVarPath = `/schedule/v1/reports/worked-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeIdsIn) {
                localVarQueryParameter['employeeIds[in]'] = employeeIdsIn.join(COLLECTION_FORMATS.csv);
            }

            if (withChecks !== undefined) {
                localVarQueryParameter['withChecks'] = withChecks;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/reports/worked-hours',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Worked Hours By Employee and Week Day
         * @param {string | Date} from Y-m-d
         * @param {string | Date} to Y-m-d
         * @param {Array<string>} [employeeIdsIn] Array of employee ids
         * @param {number} [limit] Limit employees
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedHoursByWeekDay: async (from: string | Date, to: string | Date, employeeIdsIn?: Array<string>, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('listWorkedHoursByWeekDay', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('listWorkedHoursByWeekDay', 'to', to)
            const localVarPath = `/schedule/v1/reports/worked-hours-by-week-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeIdsIn) {
                localVarQueryParameter['employeeIds[in]'] = employeeIdsIn.join(COLLECTION_FORMATS.csv);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/reports/worked-hours-by-week-day',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Worked Hours By Employee In Night Hours
         * @param {string | Date} from Y-m-d
         * @param {string | Date} to Y-m-d
         * @param {Array<string>} [employeeIdsIn] Array of employee ids
         * @param {boolean} [withChecks] true or false
         * @param {number} [limit] Limit employees
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedNightHours: async (from: string | Date, to: string | Date, employeeIdsIn?: Array<string>, withChecks?: boolean, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('listWorkedNightHours', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('listWorkedNightHours', 'to', to)
            const localVarPath = `/schedule/v1/reports/worked-night-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeIdsIn) {
                localVarQueryParameter['employeeIds[in]'] = employeeIdsIn.join(COLLECTION_FORMATS.csv);
            }

            if (withChecks !== undefined) {
                localVarQueryParameter['withChecks'] = withChecks;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/reports/worked-night-hours',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Worked Absence Days By Employee
         * @param {StatisticsApiListWorkedAbsenceDaysByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkedAbsenceDaysByEmployee(requestParameters: StatisticsApiListWorkedAbsenceDaysByEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsListWorkedAbsenceDaysByEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkedAbsenceDaysByEmployee(requestParameters.from, requestParameters.to, requestParameters.employeeIdsIn, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Worked Hours By Employee
         * @param {StatisticsApiListWorkedHoursByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkedHoursByEmployee(requestParameters: StatisticsApiListWorkedHoursByEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsListWorkedHoursByEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkedHoursByEmployee(requestParameters.from, requestParameters.to, requestParameters.employeeIdsIn, requestParameters.withChecks, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Worked Hours By Employee and Week Day
         * @param {StatisticsApiListWorkedHoursByWeekDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkedHoursByWeekDay(requestParameters: StatisticsApiListWorkedHoursByWeekDayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsListWorkedHoursByWeekDayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkedHoursByWeekDay(requestParameters.from, requestParameters.to, requestParameters.employeeIdsIn, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Worked Hours By Employee In Night Hours
         * @param {StatisticsApiListWorkedNightHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkedNightHours(requestParameters: StatisticsApiListWorkedNightHoursRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisticsListWorkedNightHoursResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkedNightHours(requestParameters.from, requestParameters.to, requestParameters.employeeIdsIn, requestParameters.withChecks, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @summary List Worked Absence Days By Employee
         * @param {StatisticsApiListWorkedAbsenceDaysByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedAbsenceDaysByEmployee(requestParameters: StatisticsApiListWorkedAbsenceDaysByEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<StatisticsListWorkedAbsenceDaysByEmployeeResponse> {
            return localVarFp.listWorkedAbsenceDaysByEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Worked Hours By Employee
         * @param {StatisticsApiListWorkedHoursByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedHoursByEmployee(requestParameters: StatisticsApiListWorkedHoursByEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<StatisticsListWorkedHoursByEmployeeResponse> {
            return localVarFp.listWorkedHoursByEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Worked Hours By Employee and Week Day
         * @param {StatisticsApiListWorkedHoursByWeekDayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedHoursByWeekDay(requestParameters: StatisticsApiListWorkedHoursByWeekDayRequest, options?: AxiosRequestConfig): AxiosPromise<StatisticsListWorkedHoursByWeekDayResponse> {
            return localVarFp.listWorkedHoursByWeekDay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Worked Hours By Employee In Night Hours
         * @param {StatisticsApiListWorkedNightHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkedNightHours(requestParameters: StatisticsApiListWorkedNightHoursRequest, options?: AxiosRequestConfig): AxiosPromise<StatisticsListWorkedNightHoursResponse> {
            return localVarFp.listWorkedNightHours(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listWorkedAbsenceDaysByEmployee operation in StatisticsApi.
 * @export
 * @interface StatisticsApiListWorkedAbsenceDaysByEmployeeRequest
 */
export type StatisticsApiListWorkedAbsenceDaysByEmployeeRequest = {
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedAbsenceDaysByEmployee
    */
    readonly from: string | Date
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedAbsenceDaysByEmployee
    */
    readonly to: string | Date
    
    /**
    * Array of employee ids
    * @type {Array<string>}
    * @memberof StatisticsApiListWorkedAbsenceDaysByEmployee
    */
    readonly employeeIdsIn?: Array<string>
    
    /**
    * Limit employees
    * @type {number}
    * @memberof StatisticsApiListWorkedAbsenceDaysByEmployee
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof StatisticsApiListWorkedAbsenceDaysByEmployee
    */
    readonly page?: number
    
}

/**
 * Request parameters for listWorkedHoursByEmployee operation in StatisticsApi.
 * @export
 * @interface StatisticsApiListWorkedHoursByEmployeeRequest
 */
export type StatisticsApiListWorkedHoursByEmployeeRequest = {
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly from: string | Date
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly to: string | Date
    
    /**
    * Array of employee ids
    * @type {Array<string>}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly employeeIdsIn?: Array<string>
    
    /**
    * true or false
    * @type {boolean}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly withChecks?: boolean
    
    /**
    * Limit employees
    * @type {number}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof StatisticsApiListWorkedHoursByEmployee
    */
    readonly page?: number
    
}

/**
 * Request parameters for listWorkedHoursByWeekDay operation in StatisticsApi.
 * @export
 * @interface StatisticsApiListWorkedHoursByWeekDayRequest
 */
export type StatisticsApiListWorkedHoursByWeekDayRequest = {
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedHoursByWeekDay
    */
    readonly from: string | Date
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedHoursByWeekDay
    */
    readonly to: string | Date
    
    /**
    * Array of employee ids
    * @type {Array<string>}
    * @memberof StatisticsApiListWorkedHoursByWeekDay
    */
    readonly employeeIdsIn?: Array<string>
    
    /**
    * Limit employees
    * @type {number}
    * @memberof StatisticsApiListWorkedHoursByWeekDay
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof StatisticsApiListWorkedHoursByWeekDay
    */
    readonly page?: number
    
}

/**
 * Request parameters for listWorkedNightHours operation in StatisticsApi.
 * @export
 * @interface StatisticsApiListWorkedNightHoursRequest
 */
export type StatisticsApiListWorkedNightHoursRequest = {
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly from: string | Date
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly to: string | Date
    
    /**
    * Array of employee ids
    * @type {Array<string>}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly employeeIdsIn?: Array<string>
    
    /**
    * true or false
    * @type {boolean}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly withChecks?: boolean
    
    /**
    * Limit employees
    * @type {number}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof StatisticsApiListWorkedNightHours
    */
    readonly page?: number
    
}

/**
 * StatisticsApiGenerated - object-oriented interface
 * @export
 * @class StatisticsApiGenerated
 * @extends {BaseAPI}
 */
export class StatisticsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List Worked Absence Days By Employee
     * @param {StatisticsApiListWorkedAbsenceDaysByEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiGenerated
     */
    public listWorkedAbsenceDaysByEmployee(requestParameters: StatisticsApiListWorkedAbsenceDaysByEmployeeRequest, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).listWorkedAbsenceDaysByEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Worked Hours By Employee
     * @param {StatisticsApiListWorkedHoursByEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiGenerated
     */
    public listWorkedHoursByEmployee(requestParameters: StatisticsApiListWorkedHoursByEmployeeRequest, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).listWorkedHoursByEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Worked Hours By Employee and Week Day
     * @param {StatisticsApiListWorkedHoursByWeekDayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiGenerated
     */
    public listWorkedHoursByWeekDay(requestParameters: StatisticsApiListWorkedHoursByWeekDayRequest, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).listWorkedHoursByWeekDay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Worked Hours By Employee In Night Hours
     * @param {StatisticsApiListWorkedNightHoursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiGenerated
     */
    public listWorkedNightHours(requestParameters: StatisticsApiListWorkedNightHoursRequest, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).listWorkedNightHours(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
