/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkEntriesCreateNewEntryRequest } from '../models';
// @ts-ignore
import { WorkEntriesCreateNewEntryRequestWorkEntryIn } from '../models';
// @ts-ignore
import { WorkEntriesCreateNewEntryRequestWorkEntryOut } from '../models';
// @ts-ignore
import { WorkEntriesCreateNewEntryResponse } from '../models';
// @ts-ignore
import { WorkEntriesDeleteByIdResponse } from '../models';
// @ts-ignore
import { WorkEntriesEndLastEntryRequest } from '../models';
// @ts-ignore
import { WorkEntriesEndLastEntryResponse } from '../models';
// @ts-ignore
import { WorkEntriesListResponse } from '../models';
// @ts-ignore
import { WorkEntriesStartNewEntryRequest } from '../models';
// @ts-ignore
import { WorkEntriesStartNewEntryRequestWorkEntryIn } from '../models';
// @ts-ignore
import { WorkEntriesStartNewEntryResponse } from '../models';
// @ts-ignore
import { WorkEntriesUpdateWorkEntryRequest } from '../models';
// @ts-ignore
import { WorkEntriesUpdateWorkEntryRequestWorkEntryIn } from '../models';
// @ts-ignore
import { WorkEntriesUpdateWorkEntryRequestWorkEntryOut } from '../models';
// @ts-ignore
import { WorkEntriesUpdateWorkEntryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkEntriesApi - axios parameter creator
 * @export
 */
export const WorkEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Work Entry
         * @param {WorkEntriesCreateNewEntryRequest} workEntriesCreateNewEntryRequest Create a Work Entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEntry: async (workEntriesCreateNewEntryRequest: WorkEntriesCreateNewEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workEntriesCreateNewEntryRequest' is not null or undefined
            assertParamExists('createNewEntry', 'workEntriesCreateNewEntryRequest', workEntriesCreateNewEntryRequest)
            const localVarPath = `/schedule/v1/work-entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workEntriesCreateNewEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workEntriesCreateNewEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Work Entry
         * @param {string} id Work Entry ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/schedule/v1/work-entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ends the last work entry
         * @param {WorkEntriesEndLastEntryRequest} workEntriesEndLastEntryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endLastEntry: async (workEntriesEndLastEntryRequest: WorkEntriesEndLastEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workEntriesEndLastEntryRequest' is not null or undefined
            assertParamExists('endLastEntry', 'workEntriesEndLastEntryRequest', workEntriesEndLastEntryRequest)
            const localVarPath = `/schedule/v1/work-entries/clock-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workEntriesEndLastEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries/clock-out',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workEntriesEndLastEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Company Work Entries
         * @param {string} [employeeId] The id of the employee
         * @param {string | Date} [from] Y-m-d
         * @param {string | Date} [to] Y-m-d
         * @param {string} [updatedAtGte] UpdatedAt greater or equal
         * @param {string} [updatedAtLte] UpdatedAt lesser or equal
         * @param {'all' | 'not_deleted' | 'deleted'} [onlyReturn] Return specific users
         * @param {number} [limit] Limit work entries
         * @param {number} [page] Request a specific page
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (employeeId?: string, from?: string | Date, to?: string | Date, updatedAtGte?: string, updatedAtLte?: string, onlyReturn?: 'all' | 'not_deleted' | 'deleted', limit?: number, page?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/work-entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (updatedAtGte !== undefined) {
                localVarQueryParameter['updatedAt[gte]'] = updatedAtGte;
            }

            if (updatedAtLte !== undefined) {
                localVarQueryParameter['updatedAt[lte]'] = updatedAtLte;
            }

            if (onlyReturn !== undefined) {
                localVarQueryParameter['onlyReturn'] = onlyReturn;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Starts a new work entry right now
         * @param {WorkEntriesStartNewEntryRequest} workEntriesStartNewEntryRequest Starts a work entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startNewEntry: async (workEntriesStartNewEntryRequest: WorkEntriesStartNewEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workEntriesStartNewEntryRequest' is not null or undefined
            assertParamExists('startNewEntry', 'workEntriesStartNewEntryRequest', workEntriesStartNewEntryRequest)
            const localVarPath = `/schedule/v1/work-entries/clock-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workEntriesStartNewEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries/clock-in',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workEntriesStartNewEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Work Entry
         * @param {string} id Work Entry ID
         * @param {WorkEntriesUpdateWorkEntryRequest} workEntriesUpdateWorkEntryRequest Update a Work Entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry: async (id: string, workEntriesUpdateWorkEntryRequest: WorkEntriesUpdateWorkEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkEntry', 'id', id)
            // verify required parameter 'workEntriesUpdateWorkEntryRequest' is not null or undefined
            assertParamExists('updateWorkEntry', 'workEntriesUpdateWorkEntryRequest', workEntriesUpdateWorkEntryRequest)
            const localVarPath = `/schedule/v1/work-entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workEntriesUpdateWorkEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/work-entries/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workEntriesUpdateWorkEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkEntriesApi - functional programming interface
 * @export
 */
export const WorkEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Work Entry
         * @param {WorkEntriesApiCreateNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEntry(requestParameters: WorkEntriesApiCreateNewEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesCreateNewEntryResponse>> {
            const workEntriesCreateNewEntryRequest: WorkEntriesCreateNewEntryRequest = {
                employeeId: requestParameters.employeeId,
                workEntryType: requestParameters.workEntryType,
                workBreakId: requestParameters.workBreakId,
                workCheckTypeId: requestParameters.workCheckTypeId,
                workEntryIn: requestParameters.workEntryIn,
                workEntryOut: requestParameters.workEntryOut
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEntry(workEntriesCreateNewEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Work Entry
         * @param {WorkEntriesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: WorkEntriesApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesDeleteByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Ends the last work entry
         * @param {WorkEntriesApiEndLastEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endLastEntry(requestParameters: WorkEntriesApiEndLastEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesEndLastEntryResponse>> {
            const workEntriesEndLastEntryRequest: WorkEntriesEndLastEntryRequest = {
                employeeId: requestParameters.employeeId,
                workEntryOut: requestParameters.workEntryOut
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.endLastEntry(workEntriesEndLastEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Company Work Entries
         * @param {WorkEntriesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: WorkEntriesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.employeeId, requestParameters.from, requestParameters.to, requestParameters.updatedAtGte, requestParameters.updatedAtLte, requestParameters.onlyReturn, requestParameters.limit, requestParameters.page, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Starts a new work entry right now
         * @param {WorkEntriesApiStartNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startNewEntry(requestParameters: WorkEntriesApiStartNewEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesStartNewEntryResponse>> {
            const workEntriesStartNewEntryRequest: WorkEntriesStartNewEntryRequest = {
                employeeId: requestParameters.employeeId,
                workEntryIn: requestParameters.workEntryIn,
                workCheckTypeId: requestParameters.workCheckTypeId,
                workBreakId: requestParameters.workBreakId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startNewEntry(workEntriesStartNewEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Work Entry
         * @param {WorkEntriesApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkEntry(requestParameters: WorkEntriesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntriesUpdateWorkEntryResponse>> {
            const workEntriesUpdateWorkEntryRequest: WorkEntriesUpdateWorkEntryRequest = {
                workEntryType: requestParameters.workEntryType,
                workEntryIn: requestParameters.workEntryIn,
                workEntryOut: requestParameters.workEntryOut
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkEntry(requestParameters.id, workEntriesUpdateWorkEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkEntriesApi - factory interface
 * @export
 */
export const WorkEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkEntriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Work Entry
         * @param {WorkEntriesApiCreateNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEntry(requestParameters: WorkEntriesApiCreateNewEntryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesCreateNewEntryResponse> {
            return localVarFp.createNewEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Work Entry
         * @param {WorkEntriesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: WorkEntriesApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesDeleteByIdResponse> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ends the last work entry
         * @param {WorkEntriesApiEndLastEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endLastEntry(requestParameters: WorkEntriesApiEndLastEntryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesEndLastEntryResponse> {
            return localVarFp.endLastEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Company Work Entries
         * @param {WorkEntriesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: WorkEntriesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Starts a new work entry right now
         * @param {WorkEntriesApiStartNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startNewEntry(requestParameters: WorkEntriesApiStartNewEntryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesStartNewEntryResponse> {
            return localVarFp.startNewEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Work Entry
         * @param {WorkEntriesApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry(requestParameters: WorkEntriesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntriesUpdateWorkEntryResponse> {
            return localVarFp.updateWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEntry operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiCreateNewEntryRequest
 */
export type WorkEntriesApiCreateNewEntryRequest = {
    
} & WorkEntriesCreateNewEntryRequest

/**
 * Request parameters for deleteById operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiDeleteByIdRequest
 */
export type WorkEntriesApiDeleteByIdRequest = {
    
    /**
    * Work Entry ID
    * @type {string}
    * @memberof WorkEntriesApiDeleteById
    */
    readonly id: string
    
}

/**
 * Request parameters for endLastEntry operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiEndLastEntryRequest
 */
export type WorkEntriesApiEndLastEntryRequest = {
    
} & WorkEntriesEndLastEntryRequest

/**
 * Request parameters for list operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiListRequest
 */
export type WorkEntriesApiListRequest = {
    
    /**
    * The id of the employee
    * @type {string}
    * @memberof WorkEntriesApiList
    */
    readonly employeeId?: string
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof WorkEntriesApiList
    */
    readonly from?: string | Date
    
    /**
    * Y-m-d
    * @type {string | Date}
    * @memberof WorkEntriesApiList
    */
    readonly to?: string | Date
    
    /**
    * UpdatedAt greater or equal
    * @type {string}
    * @memberof WorkEntriesApiList
    */
    readonly updatedAtGte?: string
    
    /**
    * UpdatedAt lesser or equal
    * @type {string}
    * @memberof WorkEntriesApiList
    */
    readonly updatedAtLte?: string
    
    /**
    * Return specific users
    * @type {'all' | 'not_deleted' | 'deleted'}
    * @memberof WorkEntriesApiList
    */
    readonly onlyReturn?: 'all' | 'not_deleted' | 'deleted'
    
    /**
    * Limit work entries
    * @type {number}
    * @memberof WorkEntriesApiList
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof WorkEntriesApiList
    */
    readonly page?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof WorkEntriesApiList
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for startNewEntry operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiStartNewEntryRequest
 */
export type WorkEntriesApiStartNewEntryRequest = {
    
} & WorkEntriesStartNewEntryRequest

/**
 * Request parameters for updateWorkEntry operation in WorkEntriesApi.
 * @export
 * @interface WorkEntriesApiUpdateWorkEntryRequest
 */
export type WorkEntriesApiUpdateWorkEntryRequest = {
    
    /**
    * Work Entry ID
    * @type {string}
    * @memberof WorkEntriesApiUpdateWorkEntry
    */
    readonly id: string
    
} & WorkEntriesUpdateWorkEntryRequest

/**
 * WorkEntriesApiGenerated - object-oriented interface
 * @export
 * @class WorkEntriesApiGenerated
 * @extends {BaseAPI}
 */
export class WorkEntriesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Work Entry
     * @param {WorkEntriesApiCreateNewEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public createNewEntry(requestParameters: WorkEntriesApiCreateNewEntryRequest, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).createNewEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Work Entry
     * @param {WorkEntriesApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public deleteById(requestParameters: WorkEntriesApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ends the last work entry
     * @param {WorkEntriesApiEndLastEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public endLastEntry(requestParameters: WorkEntriesApiEndLastEntryRequest, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).endLastEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Company Work Entries
     * @param {WorkEntriesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public list(requestParameters: WorkEntriesApiListRequest = {}, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Starts a new work entry right now
     * @param {WorkEntriesApiStartNewEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public startNewEntry(requestParameters: WorkEntriesApiStartNewEntryRequest, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).startNewEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Work Entry
     * @param {WorkEntriesApiUpdateWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkEntriesApiGenerated
     */
    public updateWorkEntry(requestParameters: WorkEntriesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig) {
        return WorkEntriesApiFp(this.configuration).updateWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
