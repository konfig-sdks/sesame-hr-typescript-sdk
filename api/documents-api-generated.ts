/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentsListDirectoriesResponse } from '../models';
// @ts-ignore
import { DocumentsUploadNewDocumentRequest } from '../models';
// @ts-ignore
import { DocumentsUploadNewDocumentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List company directories
         * @param {string} [employeeId] Filter directories by employee id
         * @param {string} [parentDirectoryType] Parent directory type
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDirectories: async (employeeId?: string, parentDirectoryType?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/document/v1/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (parentDirectoryType !== undefined) {
                localVarQueryParameter['parentDirectoryType'] = parentDirectoryType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/document/v1/directories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {string} directoryId Directory UUID
         * @param {Uint8Array | File | buffer.File} document Document to upload
         * @param {DocumentsUploadNewDocumentRequest} documentsUploadNewDocumentRequest Document to upload
         * @param {string | Date} [originalDate] Original date of document (Required for payrolls)
         * @param {string} [name] Name for the document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadNewDocument: async (directoryId: string, document: Uint8Array | File | buffer.File, documentsUploadNewDocumentRequest: DocumentsUploadNewDocumentRequest, originalDate?: string | Date, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directoryId' is not null or undefined
            assertParamExists('uploadNewDocument', 'directoryId', directoryId)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('uploadNewDocument', 'document', document)
            // verify required parameter 'documentsUploadNewDocumentRequest' is not null or undefined
            assertParamExists('uploadNewDocument', 'documentsUploadNewDocumentRequest', documentsUploadNewDocumentRequest)
            const localVarPath = `/document/v1/directories/{directoryId}/documents`
                .replace(`{${"directoryId"}}`, encodeURIComponent(String(directoryId !== undefined ? directoryId : `-directoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (document !== undefined) {
                await addFormParam('document', document, true, true)
            }
    
            if (originalDate !== undefined) {
                await addFormParam('originalDate', originalDate, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: documentsUploadNewDocumentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/document/v1/directories/{directoryId}/documents',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List company directories
         * @param {DocumentsApiListDirectoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDirectories(requestParameters: DocumentsApiListDirectoriesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsListDirectoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDirectories(requestParameters.employeeId, requestParameters.parentDirectoryType, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload document
         * @param {DocumentsApiUploadNewDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadNewDocument(requestParameters: DocumentsApiUploadNewDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsUploadNewDocumentResponse>> {
            const documentsUploadNewDocumentRequest: DocumentsUploadNewDocumentRequest = {
                document: requestParameters.document,
                originalDate: requestParameters.originalDate,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadNewDocument(requestParameters.directoryId, requestParameters.document, documentsUploadNewDocumentRequest, requestParameters.originalDate, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary List company directories
         * @param {DocumentsApiListDirectoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDirectories(requestParameters: DocumentsApiListDirectoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DocumentsListDirectoriesResponse> {
            return localVarFp.listDirectories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload document
         * @param {DocumentsApiUploadNewDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadNewDocument(requestParameters: DocumentsApiUploadNewDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentsUploadNewDocumentResponse> {
            return localVarFp.uploadNewDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listDirectories operation in DocumentsApi.
 * @export
 * @interface DocumentsApiListDirectoriesRequest
 */
export type DocumentsApiListDirectoriesRequest = {
    
    /**
    * Filter directories by employee id
    * @type {string}
    * @memberof DocumentsApiListDirectories
    */
    readonly employeeId?: string
    
    /**
    * Parent directory type
    * @type {string}
    * @memberof DocumentsApiListDirectories
    */
    readonly parentDirectoryType?: string
    
    /**
    * Limit results
    * @type {number}
    * @memberof DocumentsApiListDirectories
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof DocumentsApiListDirectories
    */
    readonly page?: number
    
}

/**
 * Request parameters for uploadNewDocument operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadNewDocumentRequest
 */
export type DocumentsApiUploadNewDocumentRequest = {
    
    /**
    * Directory UUID
    * @type {string}
    * @memberof DocumentsApiUploadNewDocument
    */
    readonly directoryId: string
    
    /**
    * Document to upload
    * @type {Uint8Array | File | buffer.File}
    * @memberof DocumentsApiUploadNewDocument
    */
    readonly document: Uint8Array | File | buffer.File
    
    /**
    * Original date of document (Required for payrolls)
    * @type {string | Date}
    * @memberof DocumentsApiUploadNewDocument
    */
    readonly originalDate?: string | Date
    
    /**
    * Name for the document
    * @type {string}
    * @memberof DocumentsApiUploadNewDocument
    */
    readonly name?: string
    
} & DocumentsUploadNewDocumentRequest

/**
 * DocumentsApiGenerated - object-oriented interface
 * @export
 * @class DocumentsApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List company directories
     * @param {DocumentsApiListDirectoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public listDirectories(requestParameters: DocumentsApiListDirectoriesRequest = {}, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).listDirectories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload document
     * @param {DocumentsApiUploadNewDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public uploadNewDocument(requestParameters: DocumentsApiUploadNewDocumentRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadNewDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
