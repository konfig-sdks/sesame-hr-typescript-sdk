/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AbsenceDayOffRequestsAcceptRequestRequest } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsAcceptRequestResponse } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsCreateDayOffRequestRequest } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOffInner } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsCreateDayOffRequestResponse } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsDeleteRequestByIdResponse } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsListDayOffRequestsResponse } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsRejectRequestRequest } from '../models';
// @ts-ignore
import { AbsenceDayOffRequestsRejectRequestResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AbsenceDayOffRequestsApi - axios parameter creator
 * @export
 */
export const AbsenceDayOffRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept Absence Day Off Request
         * @param {string} id Day Off Request Id
         * @param {AbsenceDayOffRequestsAcceptRequestRequest} [absenceDayOffRequestsAcceptRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptRequest: async (id: string, absenceDayOffRequestsAcceptRequestRequest?: AbsenceDayOffRequestsAcceptRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('acceptRequest', 'id', id)
            const localVarPath = `/schedule/v1/absence-day-off-requests/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: absenceDayOffRequestsAcceptRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/absence-day-off-requests/{id}/accept',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(absenceDayOffRequestsAcceptRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Absence Day Off Request
         * @param {AbsenceDayOffRequestsCreateDayOffRequestRequest} [absenceDayOffRequestsCreateDayOffRequestRequest] Create a Absence Day Off Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDayOffRequest: async (absenceDayOffRequestsCreateDayOffRequestRequest?: AbsenceDayOffRequestsCreateDayOffRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/absence-day-off-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: absenceDayOffRequestsCreateDayOffRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/absence-day-off-requests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(absenceDayOffRequestsCreateDayOffRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Absence Day Off Request
         * @param {string} id Day Off Request Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRequestById', 'id', id)
            const localVarPath = `/schedule/v1/absence-day-off-requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/absence-day-off-requests/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Absence Day Off Requests
         * @param {string} [employeeId] The id of the employee
         * @param {string} [absencesValidator] The id of the manager
         * @param {string | Date} [fromDayOff] First day of search period
         * @param {string | Date} [toDayOff] Last day of search period
         * @param {'accepted' | 'rejected' | 'pending'} [status] Request status
         * @param {number} [limit] Limit day offs
         * @param {number} [page] Request a specific page
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDayOffRequests: async (employeeId?: string, absencesValidator?: string, fromDayOff?: string | Date, toDayOff?: string | Date, status?: 'accepted' | 'rejected' | 'pending', limit?: number, page?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/absence-day-off-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (absencesValidator !== undefined) {
                localVarQueryParameter['absencesValidator'] = absencesValidator;
            }

            if (fromDayOff !== undefined) {
                localVarQueryParameter['fromDayOff'] = (fromDayOff as any instanceof Date) ?
                    (fromDayOff as any).toISOString().substr(0,10) :
                    fromDayOff;
            }

            if (toDayOff !== undefined) {
                localVarQueryParameter['toDayOff'] = (toDayOff as any instanceof Date) ?
                    (toDayOff as any).toISOString().substr(0,10) :
                    toDayOff;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/absence-day-off-requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reject Absence Day Off Request
         * @param {string} id Day Off Request Id
         * @param {AbsenceDayOffRequestsRejectRequestRequest} [absenceDayOffRequestsRejectRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest: async (id: string, absenceDayOffRequestsRejectRequestRequest?: AbsenceDayOffRequestsRejectRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectRequest', 'id', id)
            const localVarPath = `/schedule/v1/absence-day-off-requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: absenceDayOffRequestsRejectRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/absence-day-off-requests/{id}/reject',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(absenceDayOffRequestsRejectRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbsenceDayOffRequestsApi - functional programming interface
 * @export
 */
export const AbsenceDayOffRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbsenceDayOffRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiAcceptRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptRequest(requestParameters: AbsenceDayOffRequestsApiAcceptRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDayOffRequestsAcceptRequestResponse>> {
            const absenceDayOffRequestsAcceptRequestRequest: AbsenceDayOffRequestsAcceptRequestRequest = {
                managerId: requestParameters.managerId,
                resolutionComment: requestParameters.resolutionComment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptRequest(requestParameters.id, absenceDayOffRequestsAcceptRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiCreateDayOffRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDayOffRequest(requestParameters: AbsenceDayOffRequestsApiCreateDayOffRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDayOffRequestsCreateDayOffRequestResponse>> {
            const absenceDayOffRequestsCreateDayOffRequestRequest: AbsenceDayOffRequestsCreateDayOffRequestRequest = {
                employeeId: requestParameters.employeeId,
                absenceTypeId: requestParameters.absenceTypeId,
                type: requestParameters.type,
                daysOff: requestParameters.daysOff,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDayOffRequest(absenceDayOffRequestsCreateDayOffRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiDeleteRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequestById(requestParameters: AbsenceDayOffRequestsApiDeleteRequestByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDayOffRequestsDeleteRequestByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequestById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Absence Day Off Requests
         * @param {AbsenceDayOffRequestsApiListDayOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDayOffRequests(requestParameters: AbsenceDayOffRequestsApiListDayOffRequestsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDayOffRequestsListDayOffRequestsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDayOffRequests(requestParameters.employeeId, requestParameters.absencesValidator, requestParameters.fromDayOff, requestParameters.toDayOff, requestParameters.status, requestParameters.limit, requestParameters.page, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reject Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiRejectRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectRequest(requestParameters: AbsenceDayOffRequestsApiRejectRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDayOffRequestsRejectRequestResponse>> {
            const absenceDayOffRequestsRejectRequestRequest: AbsenceDayOffRequestsRejectRequestRequest = {
                resolutionComment: requestParameters.resolutionComment,
                managerId: requestParameters.managerId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectRequest(requestParameters.id, absenceDayOffRequestsRejectRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbsenceDayOffRequestsApi - factory interface
 * @export
 */
export const AbsenceDayOffRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbsenceDayOffRequestsApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiAcceptRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptRequest(requestParameters: AbsenceDayOffRequestsApiAcceptRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AbsenceDayOffRequestsAcceptRequestResponse> {
            return localVarFp.acceptRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiCreateDayOffRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDayOffRequest(requestParameters: AbsenceDayOffRequestsApiCreateDayOffRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AbsenceDayOffRequestsCreateDayOffRequestResponse> {
            return localVarFp.createDayOffRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiDeleteRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestById(requestParameters: AbsenceDayOffRequestsApiDeleteRequestByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AbsenceDayOffRequestsDeleteRequestByIdResponse> {
            return localVarFp.deleteRequestById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Absence Day Off Requests
         * @param {AbsenceDayOffRequestsApiListDayOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDayOffRequests(requestParameters: AbsenceDayOffRequestsApiListDayOffRequestsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AbsenceDayOffRequestsListDayOffRequestsResponse> {
            return localVarFp.listDayOffRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reject Absence Day Off Request
         * @param {AbsenceDayOffRequestsApiRejectRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest(requestParameters: AbsenceDayOffRequestsApiRejectRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AbsenceDayOffRequestsRejectRequestResponse> {
            return localVarFp.rejectRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptRequest operation in AbsenceDayOffRequestsApi.
 * @export
 * @interface AbsenceDayOffRequestsApiAcceptRequestRequest
 */
export type AbsenceDayOffRequestsApiAcceptRequestRequest = {
    
    /**
    * Day Off Request Id
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiAcceptRequest
    */
    readonly id: string
    
} & AbsenceDayOffRequestsAcceptRequestRequest

/**
 * Request parameters for createDayOffRequest operation in AbsenceDayOffRequestsApi.
 * @export
 * @interface AbsenceDayOffRequestsApiCreateDayOffRequestRequest
 */
export type AbsenceDayOffRequestsApiCreateDayOffRequestRequest = {
    
} & AbsenceDayOffRequestsCreateDayOffRequestRequest

/**
 * Request parameters for deleteRequestById operation in AbsenceDayOffRequestsApi.
 * @export
 * @interface AbsenceDayOffRequestsApiDeleteRequestByIdRequest
 */
export type AbsenceDayOffRequestsApiDeleteRequestByIdRequest = {
    
    /**
    * Day Off Request Id
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiDeleteRequestById
    */
    readonly id: string
    
}

/**
 * Request parameters for listDayOffRequests operation in AbsenceDayOffRequestsApi.
 * @export
 * @interface AbsenceDayOffRequestsApiListDayOffRequestsRequest
 */
export type AbsenceDayOffRequestsApiListDayOffRequestsRequest = {
    
    /**
    * The id of the employee
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly employeeId?: string
    
    /**
    * The id of the manager
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly absencesValidator?: string
    
    /**
    * First day of search period
    * @type {string | Date}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly fromDayOff?: string | Date
    
    /**
    * Last day of search period
    * @type {string | Date}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly toDayOff?: string | Date
    
    /**
    * Request status
    * @type {'accepted' | 'rejected' | 'pending'}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly status?: 'accepted' | 'rejected' | 'pending'
    
    /**
    * Limit day offs
    * @type {number}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly page?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiListDayOffRequests
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for rejectRequest operation in AbsenceDayOffRequestsApi.
 * @export
 * @interface AbsenceDayOffRequestsApiRejectRequestRequest
 */
export type AbsenceDayOffRequestsApiRejectRequestRequest = {
    
    /**
    * Day Off Request Id
    * @type {string}
    * @memberof AbsenceDayOffRequestsApiRejectRequest
    */
    readonly id: string
    
} & AbsenceDayOffRequestsRejectRequestRequest

/**
 * AbsenceDayOffRequestsApiGenerated - object-oriented interface
 * @export
 * @class AbsenceDayOffRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class AbsenceDayOffRequestsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Accept Absence Day Off Request
     * @param {AbsenceDayOffRequestsApiAcceptRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbsenceDayOffRequestsApiGenerated
     */
    public acceptRequest(requestParameters: AbsenceDayOffRequestsApiAcceptRequestRequest, options?: AxiosRequestConfig) {
        return AbsenceDayOffRequestsApiFp(this.configuration).acceptRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Absence Day Off Request
     * @param {AbsenceDayOffRequestsApiCreateDayOffRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbsenceDayOffRequestsApiGenerated
     */
    public createDayOffRequest(requestParameters: AbsenceDayOffRequestsApiCreateDayOffRequestRequest, options?: AxiosRequestConfig) {
        return AbsenceDayOffRequestsApiFp(this.configuration).createDayOffRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Absence Day Off Request
     * @param {AbsenceDayOffRequestsApiDeleteRequestByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbsenceDayOffRequestsApiGenerated
     */
    public deleteRequestById(requestParameters: AbsenceDayOffRequestsApiDeleteRequestByIdRequest, options?: AxiosRequestConfig) {
        return AbsenceDayOffRequestsApiFp(this.configuration).deleteRequestById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Absence Day Off Requests
     * @param {AbsenceDayOffRequestsApiListDayOffRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbsenceDayOffRequestsApiGenerated
     */
    public listDayOffRequests(requestParameters: AbsenceDayOffRequestsApiListDayOffRequestsRequest = {}, options?: AxiosRequestConfig) {
        return AbsenceDayOffRequestsApiFp(this.configuration).listDayOffRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reject Absence Day Off Request
     * @param {AbsenceDayOffRequestsApiRejectRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbsenceDayOffRequestsApiGenerated
     */
    public rejectRequest(requestParameters: AbsenceDayOffRequestsApiRejectRequestRequest, options?: AxiosRequestConfig) {
        return AbsenceDayOffRequestsApiFp(this.configuration).rejectRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
