/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AgreementsCreateNewAgreementRequest } from '../models';
// @ts-ignore
import { AgreementsCreateNewAgreementResponse } from '../models';
// @ts-ignore
import { AgreementsDeleteAgreementResponse } from '../models';
// @ts-ignore
import { AgreementsGetAgreementResponse } from '../models';
// @ts-ignore
import { AgreementsListResponse } from '../models';
// @ts-ignore
import { AgreementsUpdateAgreementRequest } from '../models';
// @ts-ignore
import { AgreementsUpdateAgreementResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AgreementsApi - axios parameter creator
 * @export
 */
export const AgreementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an agreement
         * @summary Create an agreement
         * @param {AgreementsCreateNewAgreementRequest} agreementsCreateNewAgreementRequest Data to create an agreement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAgreement: async (agreementsCreateNewAgreementRequest: AgreementsCreateNewAgreementRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agreementsCreateNewAgreementRequest' is not null or undefined
            assertParamExists('createNewAgreement', 'agreementsCreateNewAgreementRequest', agreementsCreateNewAgreementRequest)
            const localVarPath = `/schedule/v1/agreements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: agreementsCreateNewAgreementRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/agreements',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(agreementsCreateNewAgreementRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete agreement
         * @param {string} agreementId Agreement UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgreement: async (agreementId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agreementId' is not null or undefined
            assertParamExists('deleteAgreement', 'agreementId', agreementId)
            const localVarPath = `/schedule/v1/agreements/{agreementId}`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId !== undefined ? agreementId : `-agreementId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/agreements/{agreementId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agreement
         * @param {string} agreementId Agreement UUID
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgreement: async (agreementId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agreementId' is not null or undefined
            assertParamExists('getAgreement', 'agreementId', agreementId)
            const localVarPath = `/schedule/v1/agreements/{agreementId}`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId !== undefined ? agreementId : `-agreementId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/agreements/{agreementId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List agreements
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/agreements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/agreements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an agreement
         * @summary Update an agreement
         * @param {string} agreementId Agreement UUID
         * @param {AgreementsUpdateAgreementRequest} agreementsUpdateAgreementRequest Data to update an agreement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgreement: async (agreementId: string, agreementsUpdateAgreementRequest: AgreementsUpdateAgreementRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agreementId' is not null or undefined
            assertParamExists('updateAgreement', 'agreementId', agreementId)
            // verify required parameter 'agreementsUpdateAgreementRequest' is not null or undefined
            assertParamExists('updateAgreement', 'agreementsUpdateAgreementRequest', agreementsUpdateAgreementRequest)
            const localVarPath = `/schedule/v1/agreements/{agreementId}`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId !== undefined ? agreementId : `-agreementId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: agreementsUpdateAgreementRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/agreements/{agreementId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(agreementsUpdateAgreementRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgreementsApi - functional programming interface
 * @export
 */
export const AgreementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgreementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an agreement
         * @summary Create an agreement
         * @param {AgreementsApiCreateNewAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAgreement(requestParameters: AgreementsApiCreateNewAgreementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgreementsCreateNewAgreementResponse>> {
            const agreementsCreateNewAgreementRequest: AgreementsCreateNewAgreementRequest = {
                name: requestParameters.name,
                code: requestParameters.code,
                color: requestParameters.color,
                annualHours: requestParameters.annualHours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAgreement(agreementsCreateNewAgreementRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete agreement
         * @param {AgreementsApiDeleteAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgreement(requestParameters: AgreementsApiDeleteAgreementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgreementsDeleteAgreementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgreement(requestParameters.agreementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agreement
         * @param {AgreementsApiGetAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgreement(requestParameters: AgreementsApiGetAgreementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgreementsGetAgreementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgreement(requestParameters.agreementId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List agreements
         * @param {AgreementsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: AgreementsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgreementsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an agreement
         * @summary Update an agreement
         * @param {AgreementsApiUpdateAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgreement(requestParameters: AgreementsApiUpdateAgreementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgreementsUpdateAgreementResponse>> {
            const agreementsUpdateAgreementRequest: AgreementsUpdateAgreementRequest = {
                name: requestParameters.name,
                code: requestParameters.code,
                color: requestParameters.color,
                annualHours: requestParameters.annualHours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgreement(requestParameters.agreementId, agreementsUpdateAgreementRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgreementsApi - factory interface
 * @export
 */
export const AgreementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgreementsApiFp(configuration)
    return {
        /**
         * Create an agreement
         * @summary Create an agreement
         * @param {AgreementsApiCreateNewAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAgreement(requestParameters: AgreementsApiCreateNewAgreementRequest, options?: AxiosRequestConfig): AxiosPromise<AgreementsCreateNewAgreementResponse> {
            return localVarFp.createNewAgreement(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete agreement
         * @param {AgreementsApiDeleteAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgreement(requestParameters: AgreementsApiDeleteAgreementRequest, options?: AxiosRequestConfig): AxiosPromise<AgreementsDeleteAgreementResponse> {
            return localVarFp.deleteAgreement(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agreement
         * @param {AgreementsApiGetAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgreement(requestParameters: AgreementsApiGetAgreementRequest, options?: AxiosRequestConfig): AxiosPromise<AgreementsGetAgreementResponse> {
            return localVarFp.getAgreement(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List agreements
         * @param {AgreementsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: AgreementsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AgreementsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an agreement
         * @summary Update an agreement
         * @param {AgreementsApiUpdateAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgreement(requestParameters: AgreementsApiUpdateAgreementRequest, options?: AxiosRequestConfig): AxiosPromise<AgreementsUpdateAgreementResponse> {
            return localVarFp.updateAgreement(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAgreement operation in AgreementsApi.
 * @export
 * @interface AgreementsApiCreateNewAgreementRequest
 */
export type AgreementsApiCreateNewAgreementRequest = {
    
} & AgreementsCreateNewAgreementRequest

/**
 * Request parameters for deleteAgreement operation in AgreementsApi.
 * @export
 * @interface AgreementsApiDeleteAgreementRequest
 */
export type AgreementsApiDeleteAgreementRequest = {
    
    /**
    * Agreement UUID
    * @type {string}
    * @memberof AgreementsApiDeleteAgreement
    */
    readonly agreementId: string
    
}

/**
 * Request parameters for getAgreement operation in AgreementsApi.
 * @export
 * @interface AgreementsApiGetAgreementRequest
 */
export type AgreementsApiGetAgreementRequest = {
    
    /**
    * Agreement UUID
    * @type {string}
    * @memberof AgreementsApiGetAgreement
    */
    readonly agreementId: string
    
    /**
    * Limit results
    * @type {number}
    * @memberof AgreementsApiGetAgreement
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof AgreementsApiGetAgreement
    */
    readonly page?: number
    
}

/**
 * Request parameters for list operation in AgreementsApi.
 * @export
 * @interface AgreementsApiListRequest
 */
export type AgreementsApiListRequest = {
    
    /**
    * Limit results
    * @type {number}
    * @memberof AgreementsApiList
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof AgreementsApiList
    */
    readonly page?: number
    
}

/**
 * Request parameters for updateAgreement operation in AgreementsApi.
 * @export
 * @interface AgreementsApiUpdateAgreementRequest
 */
export type AgreementsApiUpdateAgreementRequest = {
    
    /**
    * Agreement UUID
    * @type {string}
    * @memberof AgreementsApiUpdateAgreement
    */
    readonly agreementId: string
    
} & AgreementsUpdateAgreementRequest

/**
 * AgreementsApiGenerated - object-oriented interface
 * @export
 * @class AgreementsApiGenerated
 * @extends {BaseAPI}
 */
export class AgreementsApiGenerated extends BaseAPI {
    /**
     * Create an agreement
     * @summary Create an agreement
     * @param {AgreementsApiCreateNewAgreementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgreementsApiGenerated
     */
    public createNewAgreement(requestParameters: AgreementsApiCreateNewAgreementRequest, options?: AxiosRequestConfig) {
        return AgreementsApiFp(this.configuration).createNewAgreement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete agreement
     * @param {AgreementsApiDeleteAgreementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgreementsApiGenerated
     */
    public deleteAgreement(requestParameters: AgreementsApiDeleteAgreementRequest, options?: AxiosRequestConfig) {
        return AgreementsApiFp(this.configuration).deleteAgreement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agreement
     * @param {AgreementsApiGetAgreementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgreementsApiGenerated
     */
    public getAgreement(requestParameters: AgreementsApiGetAgreementRequest, options?: AxiosRequestConfig) {
        return AgreementsApiFp(this.configuration).getAgreement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List agreements
     * @param {AgreementsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgreementsApiGenerated
     */
    public list(requestParameters: AgreementsApiListRequest = {}, options?: AxiosRequestConfig) {
        return AgreementsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an agreement
     * @summary Update an agreement
     * @param {AgreementsApiUpdateAgreementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgreementsApiGenerated
     */
    public updateAgreement(requestParameters: AgreementsApiUpdateAgreementRequest, options?: AxiosRequestConfig) {
        return AgreementsApiFp(this.configuration).updateAgreement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
