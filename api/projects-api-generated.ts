/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectsCreateProjectRequest } from '../models';
// @ts-ignore
import { ProjectsCreateProjectResponse } from '../models';
// @ts-ignore
import { ProjectsListResponse } from '../models';
// @ts-ignore
import { ProjectsRemoveByIdResponse } from '../models';
// @ts-ignore
import { ProjectsUpdateProjectByIdRequest } from '../models';
// @ts-ignore
import { ProjectsUpdateProjectByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectsCreateProjectRequest} projectsCreateProjectRequest Project object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectsCreateProjectRequest: ProjectsCreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectsCreateProjectRequest' is not null or undefined
            assertParamExists('createProject', 'projectsCreateProjectRequest', projectsCreateProjectRequest)
            const localVarPath = `/project/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsCreateProjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsCreateProjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List projects
         * @param {string} id Company ID
         * @param {number} [page] Request a specific page
         * @param {number} [limit] Limit results
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (id: string, page?: number, limit?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('list', 'id', id)
            const localVarPath = `/project/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {string} id Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            const localVarPath = `/project/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/projects/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a project
         * @param {string} id Project ID
         * @param {ProjectsUpdateProjectByIdRequest} projectsUpdateProjectByIdRequest Department object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectById: async (id: string, projectsUpdateProjectByIdRequest: ProjectsUpdateProjectByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProjectById', 'id', id)
            // verify required parameter 'projectsUpdateProjectByIdRequest' is not null or undefined
            assertParamExists('updateProjectById', 'projectsUpdateProjectByIdRequest', projectsUpdateProjectByIdRequest)
            const localVarPath = `/project/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectsUpdateProjectByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project/v1/projects/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUpdateProjectByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsCreateProjectResponse>> {
            const projectsCreateProjectRequest: ProjectsCreateProjectRequest = {
                description: requestParameters.description,
                companyId: requestParameters.companyId,
                name: requestParameters.name,
                parentProjectId: requestParameters.parentProjectId,
                customerId: requestParameters.customerId,
                price: requestParameters.price,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                managerId: requestParameters.managerId,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectsCreateProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List projects
         * @param {ProjectsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ProjectsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.id, requestParameters.page, requestParameters.limit, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a project
         * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a project
         * @param {ProjectsApiUpdateProjectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectById(requestParameters: ProjectsApiUpdateProjectByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsUpdateProjectByIdResponse>> {
            const projectsUpdateProjectByIdRequest: ProjectsUpdateProjectByIdRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                parentProjectId: requestParameters.parentProjectId,
                customerId: requestParameters.customerId,
                price: requestParameters.price,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                managerId: requestParameters.managerId,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectById(requestParameters.id, projectsUpdateProjectByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectsCreateProjectResponse> {
            return localVarFp.createProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List projects
         * @param {ProjectsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ProjectsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a project
         * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectsRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a project
         * @param {ProjectsApiUpdateProjectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectById(requestParameters: ProjectsApiUpdateProjectByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectsUpdateProjectByIdResponse> {
            return localVarFp.updateProjectById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectRequest
 */
export type ProjectsApiCreateProjectRequest = {
    
} & ProjectsCreateProjectRequest

/**
 * Request parameters for list operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListRequest
 */
export type ProjectsApiListRequest = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof ProjectsApiList
    */
    readonly id: string
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof ProjectsApiList
    */
    readonly page?: number
    
    /**
    * Limit results
    * @type {number}
    * @memberof ProjectsApiList
    */
    readonly limit?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof ProjectsApiList
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for removeById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiRemoveByIdRequest
 */
export type ProjectsApiRemoveByIdRequest = {
    
    /**
    * Project ID
    * @type {string}
    * @memberof ProjectsApiRemoveById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateProjectById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateProjectByIdRequest
 */
export type ProjectsApiUpdateProjectByIdRequest = {
    
    /**
    * Project ID
    * @type {string}
    * @memberof ProjectsApiUpdateProjectById
    */
    readonly id: string
    
} & ProjectsUpdateProjectByIdRequest

/**
 * ProjectsApiGenerated - object-oriented interface
 * @export
 * @class ProjectsApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a project
     * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List projects
     * @param {ProjectsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public list(requestParameters: ProjectsApiListRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a project
     * @param {ProjectsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public removeById(requestParameters: ProjectsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a project
     * @param {ProjectsApiUpdateProjectByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateProjectById(requestParameters: ProjectsApiUpdateProjectByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateProjectById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
