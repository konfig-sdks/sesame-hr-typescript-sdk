/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SalariesCreateSalaryRequest } from '../models';
// @ts-ignore
import { SalariesCreateSalaryResponse } from '../models';
// @ts-ignore
import { SalariesDeleteSalaryResponse } from '../models';
// @ts-ignore
import { SalariesListContributionGroupsResponse } from '../models';
// @ts-ignore
import { SalariesListResponse } from '../models';
// @ts-ignore
import { SalariesUpdateSalaryRequest } from '../models';
// @ts-ignore
import { SalariesUpdateSalaryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SalariesApi - axios parameter creator
 * @export
 */
export const SalariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Salary
         * @param {SalariesCreateSalaryRequest} salariesCreateSalaryRequest Salary object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalary: async (salariesCreateSalaryRequest: SalariesCreateSalaryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salariesCreateSalaryRequest' is not null or undefined
            assertParamExists('createSalary', 'salariesCreateSalaryRequest', salariesCreateSalaryRequest)
            const localVarPath = `/contract/v1/salaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: salariesCreateSalaryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/salaries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(salariesCreateSalaryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a salary
         * @param {string} salaryId Salary ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary: async (salaryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('deleteSalary', 'salaryId', salaryId)
            const localVarPath = `/contract/v1/salaries/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId !== undefined ? salaryId : `-salaryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/salaries/{salaryId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Salaries
         * @param {string} employeeId Employee ID
         * @param {string} [salaryId] Salary ID
         * @param {'daily' | 'weekly' | 'biweekly' | 'monthly' | 'yearly'} [payPeriod] Pay Period
         * @param {number} [grossSalary] Gross Salary
         * @param {number} [payments] Payments
         * @param {string} [contributionGroup] Contribution Group
         * @param {string | Date} [startDate] Start Date
         * @param {string | Date} [endDate] End Date
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (employeeId: string, salaryId?: string, payPeriod?: 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'yearly', grossSalary?: number, payments?: number, contributionGroup?: string, startDate?: string | Date, endDate?: string | Date, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('list', 'employeeId', employeeId)
            const localVarPath = `/contract/v1/salaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (salaryId !== undefined) {
                localVarQueryParameter['salaryId'] = salaryId;
            }

            if (payPeriod !== undefined) {
                localVarQueryParameter['payPeriod'] = payPeriod;
            }

            if (grossSalary !== undefined) {
                localVarQueryParameter['grossSalary'] = grossSalary;
            }

            if (payments !== undefined) {
                localVarQueryParameter['payments'] = payments;
            }

            if (contributionGroup !== undefined) {
                localVarQueryParameter['contributionGroup'] = contributionGroup;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/salaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Contribution Groups
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContributionGroups: async (limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contract/v1/contribution-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/contribution-groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a salary
         * @param {string} salaryId Salary ID
         * @param {SalariesUpdateSalaryRequest} salariesUpdateSalaryRequest Salary object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalary: async (salaryId: string, salariesUpdateSalaryRequest: SalariesUpdateSalaryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('updateSalary', 'salaryId', salaryId)
            // verify required parameter 'salariesUpdateSalaryRequest' is not null or undefined
            assertParamExists('updateSalary', 'salariesUpdateSalaryRequest', salariesUpdateSalaryRequest)
            const localVarPath = `/contract/v1/salaries/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId !== undefined ? salaryId : `-salaryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: salariesUpdateSalaryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/contract/v1/salaries/{salaryId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(salariesUpdateSalaryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalariesApi - functional programming interface
 * @export
 */
export const SalariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Salary
         * @param {SalariesApiCreateSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalary(requestParameters: SalariesApiCreateSalaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalariesCreateSalaryResponse>> {
            const salariesCreateSalaryRequest: SalariesCreateSalaryRequest = {
                employeeId: requestParameters.employeeId,
                payPeriod: requestParameters.payPeriod,
                currency: requestParameters.currency,
                grossSalary: requestParameters.grossSalary,
                payments: requestParameters.payments,
                contributionGroupId: requestParameters.contributionGroupId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                comments: requestParameters.comments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalary(salariesCreateSalaryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a salary
         * @param {SalariesApiDeleteSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalary(requestParameters: SalariesApiDeleteSalaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalariesDeleteSalaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalary(requestParameters.salaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Salaries
         * @param {SalariesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SalariesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalariesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.employeeId, requestParameters.salaryId, requestParameters.payPeriod, requestParameters.grossSalary, requestParameters.payments, requestParameters.contributionGroup, requestParameters.startDate, requestParameters.endDate, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Contribution Groups
         * @param {SalariesApiListContributionGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContributionGroups(requestParameters: SalariesApiListContributionGroupsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalariesListContributionGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContributionGroups(requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a salary
         * @param {SalariesApiUpdateSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalary(requestParameters: SalariesApiUpdateSalaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalariesUpdateSalaryResponse>> {
            const salariesUpdateSalaryRequest: SalariesUpdateSalaryRequest = {
                endDate: requestParameters.endDate,
                comments: requestParameters.comments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalary(requestParameters.salaryId, salariesUpdateSalaryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalariesApi - factory interface
 * @export
 */
export const SalariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalariesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Salary
         * @param {SalariesApiCreateSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalary(requestParameters: SalariesApiCreateSalaryRequest, options?: AxiosRequestConfig): AxiosPromise<SalariesCreateSalaryResponse> {
            return localVarFp.createSalary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a salary
         * @param {SalariesApiDeleteSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary(requestParameters: SalariesApiDeleteSalaryRequest, options?: AxiosRequestConfig): AxiosPromise<SalariesDeleteSalaryResponse> {
            return localVarFp.deleteSalary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Salaries
         * @param {SalariesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SalariesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<SalariesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Contribution Groups
         * @param {SalariesApiListContributionGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContributionGroups(requestParameters: SalariesApiListContributionGroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SalariesListContributionGroupsResponse> {
            return localVarFp.listContributionGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a salary
         * @param {SalariesApiUpdateSalaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalary(requestParameters: SalariesApiUpdateSalaryRequest, options?: AxiosRequestConfig): AxiosPromise<SalariesUpdateSalaryResponse> {
            return localVarFp.updateSalary(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSalary operation in SalariesApi.
 * @export
 * @interface SalariesApiCreateSalaryRequest
 */
export type SalariesApiCreateSalaryRequest = {
    
} & SalariesCreateSalaryRequest

/**
 * Request parameters for deleteSalary operation in SalariesApi.
 * @export
 * @interface SalariesApiDeleteSalaryRequest
 */
export type SalariesApiDeleteSalaryRequest = {
    
    /**
    * Salary ID
    * @type {string}
    * @memberof SalariesApiDeleteSalary
    */
    readonly salaryId: string
    
}

/**
 * Request parameters for list operation in SalariesApi.
 * @export
 * @interface SalariesApiListRequest
 */
export type SalariesApiListRequest = {
    
    /**
    * Employee ID
    * @type {string}
    * @memberof SalariesApiList
    */
    readonly employeeId: string
    
    /**
    * Salary ID
    * @type {string}
    * @memberof SalariesApiList
    */
    readonly salaryId?: string
    
    /**
    * Pay Period
    * @type {'daily' | 'weekly' | 'biweekly' | 'monthly' | 'yearly'}
    * @memberof SalariesApiList
    */
    readonly payPeriod?: 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'yearly'
    
    /**
    * Gross Salary
    * @type {number}
    * @memberof SalariesApiList
    */
    readonly grossSalary?: number
    
    /**
    * Payments
    * @type {number}
    * @memberof SalariesApiList
    */
    readonly payments?: number
    
    /**
    * Contribution Group
    * @type {string}
    * @memberof SalariesApiList
    */
    readonly contributionGroup?: string
    
    /**
    * Start Date
    * @type {string | Date}
    * @memberof SalariesApiList
    */
    readonly startDate?: string | Date
    
    /**
    * End Date
    * @type {string | Date}
    * @memberof SalariesApiList
    */
    readonly endDate?: string | Date
    
    /**
    * Limit results
    * @type {number}
    * @memberof SalariesApiList
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof SalariesApiList
    */
    readonly page?: number
    
}

/**
 * Request parameters for listContributionGroups operation in SalariesApi.
 * @export
 * @interface SalariesApiListContributionGroupsRequest
 */
export type SalariesApiListContributionGroupsRequest = {
    
    /**
    * Limit results
    * @type {number}
    * @memberof SalariesApiListContributionGroups
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof SalariesApiListContributionGroups
    */
    readonly page?: number
    
}

/**
 * Request parameters for updateSalary operation in SalariesApi.
 * @export
 * @interface SalariesApiUpdateSalaryRequest
 */
export type SalariesApiUpdateSalaryRequest = {
    
    /**
    * Salary ID
    * @type {string}
    * @memberof SalariesApiUpdateSalary
    */
    readonly salaryId: string
    
} & SalariesUpdateSalaryRequest

/**
 * SalariesApiGenerated - object-oriented interface
 * @export
 * @class SalariesApiGenerated
 * @extends {BaseAPI}
 */
export class SalariesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Salary
     * @param {SalariesApiCreateSalaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalariesApiGenerated
     */
    public createSalary(requestParameters: SalariesApiCreateSalaryRequest, options?: AxiosRequestConfig) {
        return SalariesApiFp(this.configuration).createSalary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a salary
     * @param {SalariesApiDeleteSalaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalariesApiGenerated
     */
    public deleteSalary(requestParameters: SalariesApiDeleteSalaryRequest, options?: AxiosRequestConfig) {
        return SalariesApiFp(this.configuration).deleteSalary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Salaries
     * @param {SalariesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalariesApiGenerated
     */
    public list(requestParameters: SalariesApiListRequest, options?: AxiosRequestConfig) {
        return SalariesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Contribution Groups
     * @param {SalariesApiListContributionGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalariesApiGenerated
     */
    public listContributionGroups(requestParameters: SalariesApiListContributionGroupsRequest = {}, options?: AxiosRequestConfig) {
        return SalariesApiFp(this.configuration).listContributionGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a salary
     * @param {SalariesApiUpdateSalaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalariesApiGenerated
     */
    public updateSalary(requestParameters: SalariesApiUpdateSalaryRequest, options?: AxiosRequestConfig) {
        return SalariesApiFp(this.configuration).updateSalary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
