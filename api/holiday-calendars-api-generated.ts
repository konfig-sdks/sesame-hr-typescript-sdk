/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HolidayCalendarsCreateNewCalendarRequest } from '../models';
// @ts-ignore
import { HolidayCalendarsCreateNewCalendarRequestDaysOffInner } from '../models';
// @ts-ignore
import { HolidayCalendarsCreateNewCalendarResponse } from '../models';
// @ts-ignore
import { HolidayCalendarsGetByIdResponse } from '../models';
// @ts-ignore
import { HolidayCalendarsListCalendarResponse } from '../models';
// @ts-ignore
import { HolidayCalendarsRemoveByIdResponse } from '../models';
// @ts-ignore
import { HolidayCalendarsUpdateByIdRequest } from '../models';
// @ts-ignore
import { HolidayCalendarsUpdateByIdRequestDaysOffInner } from '../models';
// @ts-ignore
import { HolidayCalendarsUpdateByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HolidayCalendarsApi - axios parameter creator
 * @export
 */
export const HolidayCalendarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Holidays Calendar
         * @param {HolidayCalendarsCreateNewCalendarRequest} [holidayCalendarsCreateNewCalendarRequest] Create a Holidays Calendar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCalendar: async (holidayCalendarsCreateNewCalendarRequest?: HolidayCalendarsCreateNewCalendarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/holiday-calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayCalendarsCreateNewCalendarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/holiday-calendar',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayCalendarsCreateNewCalendarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Holiday Calendar
         * @param {string} holidayCalendarId Holiday Calendar Id
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (holidayCalendarId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayCalendarId' is not null or undefined
            assertParamExists('getById', 'holidayCalendarId', holidayCalendarId)
            const localVarPath = `/schedule/v1/holiday-calendar/{holidayCalendarId}`
                .replace(`{${"holidayCalendarId"}}`, encodeURIComponent(String(holidayCalendarId !== undefined ? holidayCalendarId : `-holidayCalendarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/holiday-calendar/{holidayCalendarId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Holidays Calendar
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {string} [nameContains] Filter by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalendar: async (limit?: number, page?: number, nameContains?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/v1/holiday-calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (nameContains !== undefined) {
                localVarQueryParameter['name[contains]'] = nameContains;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/holiday-calendar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Holidays Calendar
         * @param {string} holidayCalendarId Holiday Calendar Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (holidayCalendarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayCalendarId' is not null or undefined
            assertParamExists('removeById', 'holidayCalendarId', holidayCalendarId)
            const localVarPath = `/schedule/v1/holiday-calendar/{holidayCalendarId}`
                .replace(`{${"holidayCalendarId"}}`, encodeURIComponent(String(holidayCalendarId !== undefined ? holidayCalendarId : `-holidayCalendarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/holiday-calendar/{holidayCalendarId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Holidays Calendar
         * @param {string} holidayCalendarId Holiday Calendar Id
         * @param {HolidayCalendarsUpdateByIdRequest} holidayCalendarsUpdateByIdRequest Custom field object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (holidayCalendarId: string, holidayCalendarsUpdateByIdRequest: HolidayCalendarsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'holidayCalendarId' is not null or undefined
            assertParamExists('updateById', 'holidayCalendarId', holidayCalendarId)
            // verify required parameter 'holidayCalendarsUpdateByIdRequest' is not null or undefined
            assertParamExists('updateById', 'holidayCalendarsUpdateByIdRequest', holidayCalendarsUpdateByIdRequest)
            const localVarPath = `/schedule/v1/holiday-calendar/{holidayCalendarId}`
                .replace(`{${"holidayCalendarId"}}`, encodeURIComponent(String(holidayCalendarId !== undefined ? holidayCalendarId : `-holidayCalendarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayCalendarsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/holiday-calendar/{holidayCalendarId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayCalendarsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HolidayCalendarsApi - functional programming interface
 * @export
 */
export const HolidayCalendarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HolidayCalendarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Holidays Calendar
         * @param {HolidayCalendarsApiCreateNewCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCalendar(requestParameters: HolidayCalendarsApiCreateNewCalendarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayCalendarsCreateNewCalendarResponse>> {
            const holidayCalendarsCreateNewCalendarRequest: HolidayCalendarsCreateNewCalendarRequest = {
                name: requestParameters.name,
                daysOff: requestParameters.daysOff
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCalendar(holidayCalendarsCreateNewCalendarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Holiday Calendar
         * @param {HolidayCalendarsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: HolidayCalendarsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayCalendarsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.holidayCalendarId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Holidays Calendar
         * @param {HolidayCalendarsApiListCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCalendar(requestParameters: HolidayCalendarsApiListCalendarRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayCalendarsListCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCalendar(requestParameters.limit, requestParameters.page, requestParameters.nameContains, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Holidays Calendar
         * @param {HolidayCalendarsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: HolidayCalendarsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayCalendarsRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.holidayCalendarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Holidays Calendar
         * @param {HolidayCalendarsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: HolidayCalendarsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayCalendarsUpdateByIdResponse>> {
            const holidayCalendarsUpdateByIdRequest: HolidayCalendarsUpdateByIdRequest = {
                name: requestParameters.name,
                daysOff: requestParameters.daysOff
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.holidayCalendarId, holidayCalendarsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HolidayCalendarsApi - factory interface
 * @export
 */
export const HolidayCalendarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HolidayCalendarsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Holidays Calendar
         * @param {HolidayCalendarsApiCreateNewCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCalendar(requestParameters: HolidayCalendarsApiCreateNewCalendarRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayCalendarsCreateNewCalendarResponse> {
            return localVarFp.createNewCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Holiday Calendar
         * @param {HolidayCalendarsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: HolidayCalendarsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayCalendarsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Holidays Calendar
         * @param {HolidayCalendarsApiListCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalendar(requestParameters: HolidayCalendarsApiListCalendarRequest = {}, options?: AxiosRequestConfig): AxiosPromise<HolidayCalendarsListCalendarResponse> {
            return localVarFp.listCalendar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Holidays Calendar
         * @param {HolidayCalendarsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: HolidayCalendarsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayCalendarsRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Holidays Calendar
         * @param {HolidayCalendarsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: HolidayCalendarsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayCalendarsUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewCalendar operation in HolidayCalendarsApi.
 * @export
 * @interface HolidayCalendarsApiCreateNewCalendarRequest
 */
export type HolidayCalendarsApiCreateNewCalendarRequest = {
    
} & HolidayCalendarsCreateNewCalendarRequest

/**
 * Request parameters for getById operation in HolidayCalendarsApi.
 * @export
 * @interface HolidayCalendarsApiGetByIdRequest
 */
export type HolidayCalendarsApiGetByIdRequest = {
    
    /**
    * Holiday Calendar Id
    * @type {string}
    * @memberof HolidayCalendarsApiGetById
    */
    readonly holidayCalendarId: string
    
    /**
    * Limit results
    * @type {number}
    * @memberof HolidayCalendarsApiGetById
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof HolidayCalendarsApiGetById
    */
    readonly page?: number
    
}

/**
 * Request parameters for listCalendar operation in HolidayCalendarsApi.
 * @export
 * @interface HolidayCalendarsApiListCalendarRequest
 */
export type HolidayCalendarsApiListCalendarRequest = {
    
    /**
    * Limit results
    * @type {number}
    * @memberof HolidayCalendarsApiListCalendar
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof HolidayCalendarsApiListCalendar
    */
    readonly page?: number
    
    /**
    * Filter by name
    * @type {string}
    * @memberof HolidayCalendarsApiListCalendar
    */
    readonly nameContains?: string
    
}

/**
 * Request parameters for removeById operation in HolidayCalendarsApi.
 * @export
 * @interface HolidayCalendarsApiRemoveByIdRequest
 */
export type HolidayCalendarsApiRemoveByIdRequest = {
    
    /**
    * Holiday Calendar Id
    * @type {string}
    * @memberof HolidayCalendarsApiRemoveById
    */
    readonly holidayCalendarId: string
    
}

/**
 * Request parameters for updateById operation in HolidayCalendarsApi.
 * @export
 * @interface HolidayCalendarsApiUpdateByIdRequest
 */
export type HolidayCalendarsApiUpdateByIdRequest = {
    
    /**
    * Holiday Calendar Id
    * @type {string}
    * @memberof HolidayCalendarsApiUpdateById
    */
    readonly holidayCalendarId: string
    
} & HolidayCalendarsUpdateByIdRequest

/**
 * HolidayCalendarsApiGenerated - object-oriented interface
 * @export
 * @class HolidayCalendarsApiGenerated
 * @extends {BaseAPI}
 */
export class HolidayCalendarsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Holidays Calendar
     * @param {HolidayCalendarsApiCreateNewCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayCalendarsApiGenerated
     */
    public createNewCalendar(requestParameters: HolidayCalendarsApiCreateNewCalendarRequest, options?: AxiosRequestConfig) {
        return HolidayCalendarsApiFp(this.configuration).createNewCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Holiday Calendar
     * @param {HolidayCalendarsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayCalendarsApiGenerated
     */
    public getById(requestParameters: HolidayCalendarsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return HolidayCalendarsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Holidays Calendar
     * @param {HolidayCalendarsApiListCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayCalendarsApiGenerated
     */
    public listCalendar(requestParameters: HolidayCalendarsApiListCalendarRequest = {}, options?: AxiosRequestConfig) {
        return HolidayCalendarsApiFp(this.configuration).listCalendar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Holidays Calendar
     * @param {HolidayCalendarsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayCalendarsApiGenerated
     */
    public removeById(requestParameters: HolidayCalendarsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return HolidayCalendarsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Holidays Calendar
     * @param {HolidayCalendarsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayCalendarsApiGenerated
     */
    public updateById(requestParameters: HolidayCalendarsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return HolidayCalendarsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
