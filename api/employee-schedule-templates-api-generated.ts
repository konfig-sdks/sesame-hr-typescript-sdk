/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest } from '../models';
// @ts-ignore
import { EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse } from '../models';
// @ts-ignore
import { EmployeeScheduleTemplatesListTemplatesResponse } from '../models';
// @ts-ignore
import { EmployeeScheduleTemplatesUnassignResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeScheduleTemplatesApi - axios parameter creator
 * @export
 */
export const EmployeeScheduleTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign employee to schedule template
         * @summary Create employee schedule template
         * @param {EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest} employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest Data to create a employee schedule template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeScheduleTemplate: async (employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest: EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest' is not null or undefined
            assertParamExists('createEmployeeScheduleTemplate', 'employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest', employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest)
            const localVarPath = `/schedule/v1/entity-schedule-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/entity-schedule-templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List employee schedule template
         * @summary List employee schedule template
         * @param {string} employeeId Employee ID
         * @param {string | Date} [from] 
         * @param {string | Date} [to] 
         * @param {number} [limit] Limit results
         * @param {number} [page] Request a specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates: async (employeeId: string, from?: string | Date, to?: string | Date, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listTemplates', 'employeeId', employeeId)
            const localVarPath = `/schedule/v1/employees/{employeeId}/schedule-templates`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/employees/{employeeId}/schedule-templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign employee to schedule template
         * @summary Delete employee schedule template
         * @param {string} entityScheduleTemplateId Employee schedule template UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassign: async (entityScheduleTemplateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityScheduleTemplateId' is not null or undefined
            assertParamExists('unassign', 'entityScheduleTemplateId', entityScheduleTemplateId)
            const localVarPath = `/schedule/v1/entity-schedule-templates/{entityScheduleTemplateId}`
                .replace(`{${"entityScheduleTemplateId"}}`, encodeURIComponent(String(entityScheduleTemplateId !== undefined ? entityScheduleTemplateId : `-entityScheduleTemplateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/schedule/v1/entity-schedule-templates/{entityScheduleTemplateId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeScheduleTemplatesApi - functional programming interface
 * @export
 */
export const EmployeeScheduleTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeScheduleTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign employee to schedule template
         * @summary Create employee schedule template
         * @param {EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeScheduleTemplate(requestParameters: EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse>> {
            const employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest: EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = {
                employeeId: requestParameters.employeeId,
                scheduleTemplateId: requestParameters.scheduleTemplateId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeScheduleTemplate(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List employee schedule template
         * @summary List employee schedule template
         * @param {EmployeeScheduleTemplatesApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTemplates(requestParameters: EmployeeScheduleTemplatesApiListTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeScheduleTemplatesListTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTemplates(requestParameters.employeeId, requestParameters.from, requestParameters.to, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unassign employee to schedule template
         * @summary Delete employee schedule template
         * @param {EmployeeScheduleTemplatesApiUnassignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassign(requestParameters: EmployeeScheduleTemplatesApiUnassignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeScheduleTemplatesUnassignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassign(requestParameters.entityScheduleTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeScheduleTemplatesApi - factory interface
 * @export
 */
export const EmployeeScheduleTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeScheduleTemplatesApiFp(configuration)
    return {
        /**
         * Assign employee to schedule template
         * @summary Create employee schedule template
         * @param {EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeScheduleTemplate(requestParameters: EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> {
            return localVarFp.createEmployeeScheduleTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List employee schedule template
         * @summary List employee schedule template
         * @param {EmployeeScheduleTemplatesApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(requestParameters: EmployeeScheduleTemplatesApiListTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeScheduleTemplatesListTemplatesResponse> {
            return localVarFp.listTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign employee to schedule template
         * @summary Delete employee schedule template
         * @param {EmployeeScheduleTemplatesApiUnassignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassign(requestParameters: EmployeeScheduleTemplatesApiUnassignRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeScheduleTemplatesUnassignResponse> {
            return localVarFp.unassign(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmployeeScheduleTemplate operation in EmployeeScheduleTemplatesApi.
 * @export
 * @interface EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest
 */
export type EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest = {
    
} & EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest

/**
 * Request parameters for listTemplates operation in EmployeeScheduleTemplatesApi.
 * @export
 * @interface EmployeeScheduleTemplatesApiListTemplatesRequest
 */
export type EmployeeScheduleTemplatesApiListTemplatesRequest = {
    
    /**
    * Employee ID
    * @type {string}
    * @memberof EmployeeScheduleTemplatesApiListTemplates
    */
    readonly employeeId: string
    
    /**
    * 
    * @type {string | Date}
    * @memberof EmployeeScheduleTemplatesApiListTemplates
    */
    readonly from?: string | Date
    
    /**
    * 
    * @type {string | Date}
    * @memberof EmployeeScheduleTemplatesApiListTemplates
    */
    readonly to?: string | Date
    
    /**
    * Limit results
    * @type {number}
    * @memberof EmployeeScheduleTemplatesApiListTemplates
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof EmployeeScheduleTemplatesApiListTemplates
    */
    readonly page?: number
    
}

/**
 * Request parameters for unassign operation in EmployeeScheduleTemplatesApi.
 * @export
 * @interface EmployeeScheduleTemplatesApiUnassignRequest
 */
export type EmployeeScheduleTemplatesApiUnassignRequest = {
    
    /**
    * Employee schedule template UUID
    * @type {string}
    * @memberof EmployeeScheduleTemplatesApiUnassign
    */
    readonly entityScheduleTemplateId: string
    
}

/**
 * EmployeeScheduleTemplatesApiGenerated - object-oriented interface
 * @export
 * @class EmployeeScheduleTemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeScheduleTemplatesApiGenerated extends BaseAPI {
    /**
     * Assign employee to schedule template
     * @summary Create employee schedule template
     * @param {EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeScheduleTemplatesApiGenerated
     */
    public createEmployeeScheduleTemplate(requestParameters: EmployeeScheduleTemplatesApiCreateEmployeeScheduleTemplateRequest, options?: AxiosRequestConfig) {
        return EmployeeScheduleTemplatesApiFp(this.configuration).createEmployeeScheduleTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List employee schedule template
     * @summary List employee schedule template
     * @param {EmployeeScheduleTemplatesApiListTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeScheduleTemplatesApiGenerated
     */
    public listTemplates(requestParameters: EmployeeScheduleTemplatesApiListTemplatesRequest, options?: AxiosRequestConfig) {
        return EmployeeScheduleTemplatesApiFp(this.configuration).listTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unassign employee to schedule template
     * @summary Delete employee schedule template
     * @param {EmployeeScheduleTemplatesApiUnassignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeScheduleTemplatesApiGenerated
     */
    public unassign(requestParameters: EmployeeScheduleTemplatesApiUnassignRequest, options?: AxiosRequestConfig) {
        return EmployeeScheduleTemplatesApiFp(this.configuration).unassign(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
