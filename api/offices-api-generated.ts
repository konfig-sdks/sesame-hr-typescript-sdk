/* tslint:disable */
/* eslint-disable */
/*
Sesame Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OfficesCreateOfficeRequest } from '../models';
// @ts-ignore
import { OfficesCreateOfficeRequestCoordinates } from '../models';
// @ts-ignore
import { OfficesCreateOfficeResponse } from '../models';
// @ts-ignore
import { OfficesGetAllResponse } from '../models';
// @ts-ignore
import { OfficesRemoveByIdResponse } from '../models';
// @ts-ignore
import { OfficesUpdateByIdRequest } from '../models';
// @ts-ignore
import { OfficesUpdateByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OfficesApi - axios parameter creator
 * @export
 */
export const OfficesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a office
         * @param {OfficesCreateOfficeRequest} officesCreateOfficeRequest Office object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffice: async (officesCreateOfficeRequest: OfficesCreateOfficeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'officesCreateOfficeRequest' is not null or undefined
            assertParamExists('createOffice', 'officesCreateOfficeRequest', officesCreateOfficeRequest)
            const localVarPath = `/core/v3/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: officesCreateOfficeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/offices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(officesCreateOfficeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List offices
         * @param {string} [name] Find office by name
         * @param {number} [limit] Limit offices
         * @param {number} [page] Request a specific page
         * @param {string} [orderBy] field1 asc, field2 desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (name?: string, limit?: number, page?: number, orderBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v3/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/offices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an office
         * @param {string} id Office ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            const localVarPath = `/core/v3/offices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/offices/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an office
         * @param {string} id Office ID
         * @param {OfficesUpdateByIdRequest} officesUpdateByIdRequest Office object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: string, officesUpdateByIdRequest: OfficesUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            // verify required parameter 'officesUpdateByIdRequest' is not null or undefined
            assertParamExists('updateById', 'officesUpdateByIdRequest', officesUpdateByIdRequest)
            const localVarPath = `/core/v3/offices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: officesUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v3/offices/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(officesUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfficesApi - functional programming interface
 * @export
 */
export const OfficesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfficesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a office
         * @param {OfficesApiCreateOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOffice(requestParameters: OfficesApiCreateOfficeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesCreateOfficeResponse>> {
            const officesCreateOfficeRequest: OfficesCreateOfficeRequest = {
                description: requestParameters.description,
                companyId: requestParameters.companyId,
                name: requestParameters.name,
                address: requestParameters.address,
                coordinates: requestParameters.coordinates,
                radio: requestParameters.radio
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOffice(officesCreateOfficeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List offices
         * @param {OfficesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: OfficesApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.name, requestParameters.limit, requestParameters.page, requestParameters.orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an office
         * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesRemoveByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an office
         * @param {OfficesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: OfficesApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesUpdateByIdResponse>> {
            const officesUpdateByIdRequest: OfficesUpdateByIdRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                address: requestParameters.address,
                coordinates: requestParameters.coordinates,
                radio: requestParameters.radio
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, officesUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfficesApi - factory interface
 * @export
 */
export const OfficesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfficesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a office
         * @param {OfficesApiCreateOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffice(requestParameters: OfficesApiCreateOfficeRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesCreateOfficeResponse> {
            return localVarFp.createOffice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List offices
         * @param {OfficesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: OfficesApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OfficesGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an office
         * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesRemoveByIdResponse> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an office
         * @param {OfficesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: OfficesApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOffice operation in OfficesApi.
 * @export
 * @interface OfficesApiCreateOfficeRequest
 */
export type OfficesApiCreateOfficeRequest = {
    
} & OfficesCreateOfficeRequest

/**
 * Request parameters for getAll operation in OfficesApi.
 * @export
 * @interface OfficesApiGetAllRequest
 */
export type OfficesApiGetAllRequest = {
    
    /**
    * Find office by name
    * @type {string}
    * @memberof OfficesApiGetAll
    */
    readonly name?: string
    
    /**
    * Limit offices
    * @type {number}
    * @memberof OfficesApiGetAll
    */
    readonly limit?: number
    
    /**
    * Request a specific page
    * @type {number}
    * @memberof OfficesApiGetAll
    */
    readonly page?: number
    
    /**
    * field1 asc, field2 desc
    * @type {string}
    * @memberof OfficesApiGetAll
    */
    readonly orderBy?: string
    
}

/**
 * Request parameters for removeById operation in OfficesApi.
 * @export
 * @interface OfficesApiRemoveByIdRequest
 */
export type OfficesApiRemoveByIdRequest = {
    
    /**
    * Office ID
    * @type {string}
    * @memberof OfficesApiRemoveById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateById operation in OfficesApi.
 * @export
 * @interface OfficesApiUpdateByIdRequest
 */
export type OfficesApiUpdateByIdRequest = {
    
    /**
    * Office ID
    * @type {string}
    * @memberof OfficesApiUpdateById
    */
    readonly id: string
    
} & OfficesUpdateByIdRequest

/**
 * OfficesApiGenerated - object-oriented interface
 * @export
 * @class OfficesApiGenerated
 * @extends {BaseAPI}
 */
export class OfficesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a office
     * @param {OfficesApiCreateOfficeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public createOffice(requestParameters: OfficesApiCreateOfficeRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).createOffice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List offices
     * @param {OfficesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public getAll(requestParameters: OfficesApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an office
     * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an office
     * @param {OfficesApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public updateById(requestParameters: OfficesApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
